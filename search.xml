<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Charles使用技巧</title>
    <url>/2020/10/25/Charles%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>在这里，我介绍Charles在文档并没有写到的使用技巧。</p>
<p>可以阅读官方文档，或者这篇<a href="https://juejin.im/post/6844903665304600589" target="_blank" rel="noopener">文章</a></p>
<h1 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h1><p>高亮可以让使用颜色区分请求记录。可以请求方法、请求头、响应头和响应code进行值的配置来设置颜色。</p>
<p>虽然说，在会话的Sequence面板，第一个列已经有了对应的类型，但是个人感觉那个并不够醒目。</p>
<a id="more"></a>

<p>我大部分使用响应的Header来区分（因为request的header变化很多），所以我的配置是这样的</p>
<ul>
<li>红色是HTTP 响应code 不等于200</li>
<li>灰色的是HTML数据，text/html;</li>
<li>绿色是响应的JSON是数据，application/json</li>
<li>蓝色的是JS，application/javascript</li>
<li>橙色的是CSS，text/css</li>
<li>还可以对tag设置，标记breakpoint、localmap、remotemap、block等请求的颜色</li>
<li>对域名的过滤，建议使用focus，或者直接从Filter输入框过滤</li>
</ul>
<p>高亮匹配逻辑是，从上到下，优先级从高到底，并且匹配成功后，就不会再匹配，仅取第一次的颜色。</p>
<p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/imgimgimage-20201108211957841.png" alt="image-20201108211957841"></p>
<p>还有其它的一些plan或者multipart data的响应我就没有配置，因为频率不高</p>
<p><strong>遇到的问题</strong></p>
<p>上面仅仅是标记HTTP请求的状态，如果是HTTP传输成功，但是是服务器内部错误。<br>这个时候请求是属于JSON的响应头，这时通过Ctrl+F或者command+F搜索错误提示的文字了。</p>
<p>可是，如果是在一个复杂的系统。当我们请求一个接口，而它需要依赖其它接口的成功状态的时候。</p>
<p>举例子，A接口是登录授权接口，并且登录成功后，会返回新的token，跟新身份。<br>B接口是一个依赖登录的接口，如果没有登录，就会返回未授权，不给数据。<br>如果仅仅只有2个接口，先调用A，再调用B，那么我们从抓包看2个新增的请求，就可以看到了。</p>
<p>现实情况是A和B之间，可能存在N（N&gt;3）个请求。也就是说，B请求返回未授权，B前面有很多个请求，并且仅有1个请求是授权接口，它返回了失败的状态码。我们需要在N个请求中找到A接口。这是一个痛苦的事情，如果一个个的点请求，太繁琐了。</p>
<p>这个时候，要先理解接口返回的数据状态是否成功。这个不是HTTP的传输是否成功，是和后端协商的接口逻辑，表达这个数据是否正常。</p>
<p>所以只能使用正则匹配返回的JSON数据，把数据状态不正常的请求搜索出来。。</p>
<h1 id="切换布局"><a href="#切换布局" class="headerlink" title="切换布局"></a>切换布局</h1><p><strong>Structure</strong>和<strong>Sequence</strong>是两种展示请求记录的布局UI</p>
<p><strong>Structure</strong>是根据请求的URL进行分类布局，而<strong>Sequence</strong>可以说是展示了每个请求的大致属性。</p>
<p>除了从会话的分类标签切换布局，还可以右键单击每个请求，<strong>Show in Structure</strong> 或者<strong>Show in Sequence</strong></p>
<p>来切换。</p>
<p>如果你在<strong>Structure</strong>页面，想要查看当前这个会话这个请求的前后请求，就右键<strong>Show in Sequence</strong></p>
<p>如果你在<strong>Sequence</strong>页面，想要查看当前这个会话同样的URL请求，就右键<strong>Show in Structure</strong> </p>
<h1 id="新建多个会话"><a href="#新建多个会话" class="headerlink" title="新建多个会话"></a>新建多个会话</h1><p>Charles，可以新建多个记录会话。</p>
<p>Ctrl+N就可以创建新会话，注意多个会话时，如果会话有<em>号，当前的抓包记录都会摆记录在有</em>号的会话中。</p>
<p>Charles仅允许同时一个会话在记录。</p>
<p>每当新建会话的时候，就会暂停上一个会话的记录行为。</p>
<p>会话的请求记录，可以从A会话移动到B会话。<br>仅仅左键单击拖动请求记录到另外一个会话Tab上，再释放左键就好了</p>
<p><strong>多个会话有什么意义？</strong></p>
<p>按照会话保留请求记录，防止请求记录丢失。有时候，请求需要被多次参考，定位bug。</p>
<p>比如，我开了dev环境抓取了数据，然后我又去到test环境或者线上环境，这样他们的数据都被放在不同的会话中。可以diff差异，定位问题。</p>
<h1 id="对比功能"><a href="#对比功能" class="headerlink" title="对比功能"></a>对比功能</h1><p>有时候，我们某个接口调试不通，而某个接口又可以。</p>
<p>这个是时候，需要排除客户端的请求参数，或者服务器返回的响应参数来做diff定位问题。</p>
<p>可惜，Charles的原生对比请求功能启用限制很大，不知道是不是bug。。看error日志，报exception。</p>
<p>仅仅能对同URL的POST请求，并且第一个请求对比不了。</p>
<p>需要Ctrl+左边选中2个请求记录，然后右键compare。</p>
<p>如果真的为了对比，建议拷贝出来找些第三方工具对比</p>
<h1 id="导出功能"><a href="#导出功能" class="headerlink" title="导出功能"></a>导出功能</h1><p>Charles导出功能，一般我们能想要的就是导出来，需要用到的时候再导回去。</p>
<p>可是导出来，不仅仅是为了又导入。。</p>
<p>我们可以导出为<strong>XML Session File</strong>，这个文件记录了Charles的所有请求数据。我们使用脚本或命令行搜索我们需要的内容，有时候Charles没有提供的功能，也可以自己脚本处理了</p>
<h1 id="保存配置"><a href="#保存配置" class="headerlink" title="保存配置"></a>保存配置</h1><p>对于Charles来说，有一点需要强调的就是所有的配置都可以导出来，并且再导入回去。</p>
<p>这样我们在新的电脑或者环境，就可以恢复配置。。</p>
<p>而且，我们也可以考虑使用多个配置文件来切换。。</p>
<h1 id="其它相关拓展"><a href="#其它相关拓展" class="headerlink" title="其它相关拓展"></a>其它相关拓展</h1><ul>
<li>熟练抓包工具后，就可以查阅HTTP 1.1/2.0 的<a href="https://tools.ietf.org/html/rfc7231" target="_blank" rel="noopener">RFC</a>，了解更多的请求头意义及用法</li>
<li>TCP流量分析，Wireshark抓包TCP的工具，以及TCPdump</li>
<li>Charles的类似可编程工具，<a href="https://github.com/mitmproxy/mitmproxy" target="_blank" rel="noopener">mintmproxy</a>及<a href="https://docs.mitmproxy.org/stable/" target="_blank" rel="noopener">文档</a></li>
<li>MITM attacks工具<a href="https://github.com/bettercap?type=source" target="_blank" rel="noopener">bettercap</a>，ettercap</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/6844903665304600589" target="_blank" rel="noopener">https://juejin.im/post/6844903665304600589</a></p>
<p><a href="https://tools.ietf.org/html/rfc7231" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc7231</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>网络</tag>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>TODO</title>
    <url>/2020/11/08/Problem/</url>
    <content><![CDATA[<p><strong>Blog暂时停止更新，使用知乎更新。<a href="https://www.zhihu.com/people/ceng-fan-rong-9/posts" target="_blank" rel="noopener">https://www.zhihu.com/people/ceng-fan-rong-9/posts</a></strong></p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul>
<li><input checked disabled type="checkbox"> <p>寻找制定Plan并且按照Plan有效执行的方法或者技巧，让自己保持执行力</p>
<p>S.M.A.R.T+按天的进度反馈，根据难点调整方案和策略+聚焦目标和问题。难度是执行力，我仍然需要提升</p>
</li>
<li><input checked disabled type="checkbox"> <p>探索提升阅读能力<br>《如何阅读一本书》《金字塔原理》都可以很好的提升阅读能力</p>
</li>
<li><input checked disabled type="checkbox"> <p>探索（是什么、为什么、怎么办）这套思考方式与(动机、目标、问题、行为、结果、执行力)的更深一层联系和关系。</p>
<p>动机-&gt;拆分目标-&gt;设计方案-&gt;行为-&gt;按天反馈任务进度-&gt;保持执行力-&gt;解决实现目标过程中遇到的问题-&gt;结果&gt;对比和预期的结果-&gt;复盘（寻找可以优化的方案+行为）</p>
</li>
<li><input checked disabled type="checkbox"> <p>Charles抓包技巧</p>
</li>
</ul>
<h1 id="2021目标"><a href="#2021目标" class="headerlink" title="2021目标"></a>2021目标</h1><ul>
<li><input disabled type="checkbox"> 对知识保持空杯状态<br><strong>为什么要保持空杯状态呢</strong>？<br>因为时代一直在发展，<strong>已经掌握的知识仅仅提升熟练度毫无价值，而且要注意思维固化</strong>，还有很多额外的知识需要自己认真补充。<br><strong>如何保持空杯状态呢？</strong><br>挑选当前自己认为最需要提升的点（思考这个知识点有什么用），再寻找办法学习它。</li>
<li><input disabled type="checkbox"> 强化软件开发知识深度。一般来说，绝大部分概念和知识点都可以在网络上搜索到，我们是需要<strong>锻炼自己的理解能力和学习能力为主</strong>。<br><strong>学习是永无止境的，保持空杯状态。让自己一直进步就好</strong></li>
<li><input disabled type="checkbox"> 了解产品运营基本知识点，为了熟悉程序开发的上下游。提升对业务的抽象处理能力，提升自己的业务分析能力，增加沟通流畅度</li>
<li><input disabled type="checkbox"> 沟通表达技巧，团队合作，共赢思维</li>
<li><input disabled type="checkbox"> <del>计划考研。</del>主要还是提升能够看懂论文的能力。因为有时候很多问题答案并不能在搜索引擎搜出来，而是要去搜论文。。我是想自己能够<strong>解决遇到的问题就足矣</strong>。<strong>另外英语很重要</strong>。核心目标是提升自己解决问题的能力，学习能力。参考网络，很多人以为考研后就是上岸了，其实不是的。<strong>考研是为了提升自己在某一个领域的研究能力（学习力），而现在互联网时代，自学是慢一点，但是一样可以提升自己的探索能力。只要保持学习，我相信自己一定可以达到想要的。</strong></li>
<li><input disabled type="checkbox"> 7000英语单词</li>
<li><input disabled type="checkbox"> 注重自己的思维培养–思考方式</li>
</ul>
]]></content>
      <categories>
        <category>计划</category>
      </categories>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title>merlin-梅林路由器自动切换网关</title>
    <url>/2020/08/22/merlin-%E6%A2%85%E6%9E%97%E8%B7%AF%E7%94%B1%E5%99%A8%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>目前家里是使用AC86U+N1搭建上网环境，N1用来做辅助网关。如果手动设置的话，如果N1挂掉了，或者无法上网，就导致AC86U手动设置的N1网关无效，从而导致AC86U无法上网了。</p>
<p>目的：如果家人取下N1的lan，就自动切换为AC86U为网关，那么就能保证N1出问题的时候，家人拔下N1就可以恢复上网了。</p>
<p>我家用的网络拓扑图如下：<br><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/imgAC86U.005.jpeg" alt="AC86U.005"></p>
<p>于是寻找一些论坛，如恩山，koolshare，都没有自动切换网关的脚本，所以就自己写了一下，我也大概看了一下<a href="https://github.com/RMerl/asuswrt-merlin.ng" target="_blank" rel="noopener">asuswrt-merlin.ng</a>里面的Service是有哪些命令，并且发现路由是通过nvram命令进行数据储存的用户的路由存储配置。<br>脚本已经使用几个月了，功能比较稳，可以满足需求</p>
<a id="more"></a>

<h2 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h2><p>现在先给出脚本实现和配置<strong>auto_switch_gateway.sh</strong>，可以根据自己的情况修改ip参数，up_gateway是标记AC86U的WAN是否连上了，如果是没有跟我一样的网络拓扑结构，而是路由器拨号上网的，可以把up_gateway修改成公共DNS网关。如，223.5.5.5或者114.114.114.114</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">default_gateway=<span class="string">'192.168.50.1'</span></span><br><span class="line">auxiliary_gateway=<span class="string">'192.168.50.2'</span></span><br><span class="line"></span><br><span class="line">up_gateway=<span class="string">'192.168.1.1'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_ip_available</span></span>()&#123;</span><br><span class="line">    ping -c 3 <span class="variable">$1</span> | grep packets | awk <span class="string">'&#123;print $4&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># If the gateway of the up close, the network is completely unusable</span></span><br><span class="line"></span><br><span class="line">res=`check_ip_available <span class="variable">$up_gateway</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$res</span></span><br><span class="line"><span class="keyword">if</span> [ $((res)) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"up_gateway unusable"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cur_gateway=`/bin/nvram get dhcp_gateway_x` <span class="comment"># get current gateway</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$cur_gateway</span>"</span> = <span class="string">"<span class="variable">$default_gateway</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"cur is default_gateway"</span></span><br><span class="line">   res=`check_ip_available <span class="variable">$auxiliary_gateway</span>`</span><br><span class="line">   <span class="keyword">if</span> [ $((<span class="variable">$res</span>)) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"d-exit"</span></span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"switch to auxiliary"</span></span><br><span class="line">   <span class="comment"># to switch</span></span><br><span class="line">   /bin/nvram <span class="built_in">set</span> dhcp_gateway_x=<span class="variable">$auxiliary_gateway</span></span><br><span class="line">   /bin/nvram <span class="built_in">set</span> dhcp_dns1_x=<span class="variable">$auxiliary_gateway</span></span><br><span class="line">   /bin/nvram <span class="built_in">set</span> dhcp_dns2_x=<span class="string">""</span></span><br><span class="line">   /bin/nvram commit</span><br><span class="line"></span><br><span class="line">   /sbin/rc rc_service restart_net_and_phy</span><br><span class="line">   <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$cur_gateway</span>"</span> = <span class="string">"<span class="variable">$auxiliary_gateway</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"cur is auxiliary_gateway"</span></span><br><span class="line">   res=`check_ip_available <span class="variable">$auxiliary_gateway</span>`</span><br><span class="line">   <span class="keyword">if</span> [ $((<span class="variable">$res</span>)) -gt 0 ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"a-exit"</span></span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"switch to default"</span></span><br><span class="line">   <span class="comment"># to switch</span></span><br><span class="line">   /bin/nvram <span class="built_in">set</span> dhcp_gateway_x=<span class="variable">$default_gateway</span></span><br><span class="line">   /bin/nvram <span class="built_in">set</span> dhcp_dns1_x=119.29.29.29</span><br><span class="line">   /bin/nvram <span class="built_in">set</span> dhcp_dns2_x=223.5.5.5</span><br><span class="line">   /bin/nvram commit</span><br><span class="line"></span><br><span class="line">   /sbin/rc rc_service restart_net_and_phy</span><br><span class="line">   <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"nothing change"</span></span><br></pre></td></tr></table></figure>

<p>/sbin/rc rc_service restart_net_and_phy，这句命令，其实就是路由器修改本地网关后，会触发的命令。所以这个命令，和网页手动触发效果是一样的<a href="https://sourcegraph.com/github.com/RMerl/asuswrt-merlin.ng/-/blob/release/src/router/www/Advanced_LAN_Content.asp" target="_blank" rel="noopener">LAN代码</a>。这样不用调用reboot命令重启路由器</p>
<p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/imgAC86U.003.jpg" alt="AC86U.003"></p>
<p>可是我后面发现了一个问题，上面仅仅是通过终端运行脚本，使用ping命令来判断网络的情况和网关的情况，并且优先切换到切换到辅助网关上。这脚本仅仅是自己手动运行执行来检测网络情况的，所以我需要一个自动运行这个检测脚本的脚本</p>
<h1 id="梅林init-start路由启动钩子"><a href="#梅林init-start路由启动钩子" class="headerlink" title="梅林init-start路由启动钩子"></a>梅林init-start路由启动钩子</h1><p>如果你直接在路由添加crontab定时任务，重启就会被清空，而/jffs/scripts/init-start会在路由器开机时执行</p>
<p>所以我们就可以通过在init-start 添加任务到crontab，进行定时触发我们的网络情况监测</p>
<p>我做了个延迟添加网络监听任务到crontab任务脚本<strong>create_crontab_auto_switch_gateway.sh</strong>，</p>
<p>意思是init-start触发<strong>create_crontab_auto_switch_gateway.sh</strong>，然后<strong>create_crontab_auto_switch_gateway.sh</strong>每秒判断AC86U的WAN外网是否可以ping通，如果可以ping通就添加上面的<strong>auto_switch_gateway.sh</strong>到crontab中。</p>
<p>为什么要这样处理呢？因为init-start的执行时间不确定，而且是比较早的。所以我需要等待到网络好了，再添加网络监测，想要达到类似Systemd 的Service 的 After=network.target的作用</p>
<p>下面代码需要需改 /var/spool/cron/crontabs/xxx成 对应的参数，下面示例，xxx是我的AC86U路由器登陆账号，192.168.1.1是我AC86U的WAN连接的广电盒子，如果跟我的网络拓扑图不一样，是路由器直接拨号上网，可以修改成114.114.114.114</p>
<p><strong>reate_crontab_auto_switch_gateway.sh</strong>代码如下，需要简单修改一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">sleep 1;</span><br><span class="line">ping -c 1 192.168.1.1 &gt; /dev/null <span class="comment">#判断路由器的WAN是否连接上了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">continue</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"* * * * * /bin/bash /jffs/scripts/auto_switch_gateway.sh"</span> &gt;&gt; /var/spool/cron/crontabs/xxx<span class="comment"># 这里需要把XXX改成你的路由账号名</span></span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>把上面两个脚本都放在/jffs/scripts/目录下，然后我们看下init-start配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">/bin/bash /jffs/scripts/create_crontab_auto_switch_gateway.sh</span><br></pre></td></tr></table></figure>

<p>如上，就配置好了网关定时任务切换</p>
<h1 id="其它优化"><a href="#其它优化" class="headerlink" title="其它优化"></a>其它优化</h1><p>如果你遇到梅林路由AC86U网页后台管理打不开，但是路由还能上网，可以添加这个定时任务到init-start，每天4点重启http进程，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'0 4 * * * service restart_httpd'</span> &gt;&gt; /var/spool/cron/crontabs/xxx</span><br></pre></td></tr></table></figure>

<p>如果你和我一样，是用广电盒子，广电盒子上网重启后比较坑，需要开广电的U点盒子开电视后，才能上网的。</p>
<p>一开始我就尝试抓包摸索，到底是什么东西触发让U点盒子可以激活广电盒子上网的，后来发现，只要直接访问广电盒子的网关服务器管理页面，就可以不需要开启广电U点盒子来让广电盒子上网了，所以我就添加了个启动路由器的时候定时发出个curl。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'* * * * * /usr/sbin/curl http://192.168.1.1/cgi-bin/luci'</span> &gt;&gt; /var/spool/cron/crontabs/xxx</span><br></pre></td></tr></table></figure>

<p>所以，我的init-start是这样的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">/bin/bash /jffs/scripts/create_crontab_auto_switch_gateway.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'0 4 * * * service restart_httpd'</span> &gt;&gt; /var/spool/cron/crontabs/xxx</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'* * * * * /usr/sbin/curl http://192.168.1.1/cgi-bin/luci'</span> &gt;&gt; /var/spool/cron/crontabs/xxx</span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>auto_switch_gateway.sh 是用来每分钟检测网络状况，并且进行网关切换的（而网关切换一般需要35-40秒，就像你在路由管页修改网关时，点击提交那样需要的时间，所以需要设置为每分钟检测，这样保守点）</p>
<p>然后路由器是init-start开机时候执行的，因为直接在crontab添加，重启后脚本就被清空了。所以需要在这里添加。</p>
<p>由于init-start是比较早执行的，可能那时候路由器的网络相关功能还没初始好，所以我们需要延迟一下，每秒判断AC86U的WAN是否连接上了，才添加auto_switch_gateway.sh 任务到 crontab</p>
<p>有可能你会疑惑service和rc_service。一开始我发现service.c有些命令好像不能执行，但是现在测试又可以了，/sbin/rc rc_service反而可以运行想要的命令，也可以找到很多命令。我没有深入了解它们的真实区别。而且可以看到rc执行main是往某个进程发送命令的 ，这里可以找到其它命令<a href="https://sourcegraph.com/github.com/RMerl/asuswrt-merlin.ng/-/blob/release/src/router/net-snmp/agent/mibgroup/asus-mib/administration.c#L43" target="_blank" rel="noopener">administration.c</a>、<a href="https://sourcegraph.com/github.com/RMerl/asuswrt-merlin.ng/-/blob/release/src/router/rc/services.c" target="_blank" rel="noopener">service.c</a>和<a href="https://sourcegraph.com/github.com/RMerl/asuswrt-merlin.ng/-/blob/release/src/router/rc/rc.c" target="_blank" rel="noopener">rc.c</a></p>
<h1 id="论坛推荐"><a href="#论坛推荐" class="headerlink" title="论坛推荐"></a>论坛推荐</h1><p>有些资料也是从论坛搜来的，感谢互联网</p>
<p><a href="https://www.snbforums.com/forums/asuswrt-merlin.42/" target="_blank" rel="noopener">Snbforums</a></p>
<p><a href="https://www.right.com.cn/forum/" target="_blank" rel="noopener">恩山</a></p>
<p><a href="https://koolshare.cn/" target="_blank" rel="noopener">Koolshare</a></p>
]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>辅助网关</tag>
        <tag>N1</tag>
        <tag>科学上网</tag>
        <tag>AC86U</tag>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>一个想法，用工具提升英语阅读能力</title>
    <url>/2020/09/18/%E4%B8%80%E4%B8%AA%E6%83%B3%E6%B3%95%EF%BC%8C%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8F%90%E5%8D%87%E8%8B%B1%E8%AF%AD%E9%98%85%E8%AF%BB%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<h1 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h1><p>我们力求可以在生活中，工作中不断的突破自己。</p>
<p>我就说下我遇到的问题，我觉得英语是未来人必须要掌握的，因为英语可以和全世界的人进行交流<br>除了可以获取知识，也可以获取各种技巧和tips，所以我必须解决自己的英语阅读障碍。</p>
<a id="more"></a>

<p>念书时，我是比较比较偏科的，就是不喜欢背诵+重复的东西，英语不怎么好。而且从来没想到英语这么重要。</p>
<h1 id="我是如何在目前这个阶段，学习英语"><a href="#我是如何在目前这个阶段，学习英语" class="headerlink" title="我是如何在目前这个阶段，学习英语"></a>我是如何在目前这个阶段，学习英语</h1><p>最近一年，我刻意练习，尝试从零学习英语，发现不太合适。</p>
<p>我的练习场景是在网络上阅读文章。所以我接触比较多的句子类型，一般都是陈述句。我们就专门学习陈述句就好了。<br>先不用去深入学习疑问句，我们就专门搞所有的陈述句</p>
<p>后来，我看了一本台湾人写的语法书，是旋元佑出的。里面感觉比较适合我这种零基础的。</p>
<p>总结一下我们的目的，我们针对陈述性的句子进行练习就可以了。</p>
<h1 id="语法感悟"><a href="#语法感悟" class="headerlink" title="语法感悟"></a>语法感悟</h1><p>根据以前薄弱的语法基础+阅读旋元佑语法书后的感悟（下面仅仅是自己的感悟，没有完整的描述动词的时态，仅仅是为了快速寻找到主谓宾，水平有限啊，在持续提升）</p>
<p>我们要理解一个句子说了什么，就一定要找到主谓宾（小学老师就反复强调了），我们看英语懵逼，一般都是无法找到主谓宾，从而无法理解句子想表达什么</p>
<p>一般来说，主语和宾语都是名词，而名词的特点</p>
<ul>
<li>名词前面有a或者the</li>
<li>of前面很大几率是名词，of后面是它的方位，或者包含关系的。（修饰性质）</li>
<li>for后面可能也是名词，表达前面动词做了什么，是对for后面的名词产生影响的</li>
</ul>
<p>动词的特点</p>
<ul>
<li><p>如果句子有be一般都是当做动词来使用了</p>
</li>
<li><p>如果ed后缀或者ing，可能这个是动词，但是不确定。。</p>
</li>
<li><p>如下面这种阅读中也比较常见，看起来set 是动词 to 后面的track也是动词。所以这里就要注意了，我的理解是 set up这个动作是 track的前提。或者说，set up 后，再track。我是这么理解的(非要纠结就去看标准语法书，to是介词，表可以表示目的？或者将要做的？)</p>
<p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/img1600362851302.jpg" alt="1600362851302"></p>
</li>
</ul>
<p>由于英语太菜，所以，想弄个chrome插件（未实现），或者脚本来处理这个事情，这样可以在寻找工作相关的资料过程中提升自己的英语水平，一举两得，不用去弄出一大块时间来学习英语</p>
<h1 id="插件核心功能分析"><a href="#插件核心功能分析" class="headerlink" title="插件核心功能分析"></a>插件核心功能分析</h1><p>现在很多chrome插件，和各种词典。可是都是什么点击查询，查询完就忘记。而无法做到，让我们逐渐脱离工具，让我们成为自主阅读英语的人，让我们尽量少依赖点击查询这种工具了（为了什么？本质上提升英语阅读能力+词汇量，让这个工具真的在帮助我们在提升英语阅读能力）</p>
<p>作为英语不够好的体验者来说，我比较想如果有某个工具。其功能如下：</p>
<ul>
<li>可以对chrome上的句子进行主谓宾用不同的颜色标记出来，如主语蓝色，谓语红色，宾语绿色，那么我们就可以一眼知道句子的大致成分是什么。</li>
</ul>
<p>除了上面的标出主谓宾，感觉还是不够的。因为陌生的单词，是一个痛点。</p>
<p><strong>陌生单词的两种处理方式</strong></p>
<ul>
<li>如果我们直接用现有的查词工具，它们基本都是点击就查询，然后就弹出解析。可是关闭后，我们就忘记了单词和它的意思。。。</li>
<li>考虑到，以前我们小时候学习英语的时候，都是先给出生词给你背诵，然后再读英语短文，这样子读起来还是想起刚才接触的陌生单词</li>
</ul>
<p>这两种方式，体验有什么不一样的呢？</p>
<p>第一种，查了看，然后知道意思，却是不进脑子</p>
<p>第二种，是可以再阅读陌生英语材料的时候，用脚本从你认识的单词中，过滤出陌生的单词，并且给你过一遍意思，这样你在阅读到它的时候，就会努力的回想刚才这个单词是什么意思。这样的努力练习，理论上就等于你在背诵单词了。（通过尝试回忆起刚才的大意），而且这样不用点击查询，反复打断你的上下文理解思路。</p>
<p><strong>单词组成分析</strong><br>最近在看XX单词学习课程，单词有后缀来定位词性（如形容词，副词），前缀用来表达一些属性（如方向，否定语句，程度等），词根是一些具有一定意义的组成。</p>
<p>如果批量查询的时候，能够给出这些提升，也是比较好的。。（不过需要对前缀+后缀+词根学习过的才更好）</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上是自己的一些感受，现在看一般的陈述句是没啥问题了，但词汇量是个坑~</p>
<p>主谓宾的实现:(还是调API吧-.-)</p>
<ol>
<li><a href="https://www.quora.com/How-do-I-create-an-algorithm-that-can-identify-verbs-nouns-adjectives-in-Java" target="_blank" rel="noopener">https://www.quora.com/How-do-I-create-an-algorithm-that-can-identify-verbs-nouns-adjectives-in-Java</a></li>
<li><a href="https://stackoverflow.com/questions/5544475/does-an-algorithm-exist-to-help-detect-the-primary-topic-of-an-english-sentenc" target="_blank" rel="noopener">https://stackoverflow.com/questions/5544475/does-an-algorithm-exist-to-help-detect-the-primary-topic-of-an-english-sentenc</a></li>
<li><a href="https://cloud.google.com/natural-language/" target="_blank" rel="noopener">https://cloud.google.com/natural-language/</a></li>
</ol>
<p>能想到的问题，一般科学家数学家都早已经解决掉，形成工具或者框架了</p>
<p>好吧，以后就用Google已有的工具搞懂一些长难句..</p>
]]></content>
      <categories>
        <category>自我提升</category>
        <category>工具</category>
        <category>英语</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>英语</tag>
        <tag>自我提升</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Babel插入console.log到函数顶部</title>
    <url>/2020/08/22/%E4%BD%BF%E7%94%A8Babel%E6%8F%92%E5%85%A5console-log%E5%88%B0%E5%87%BD%E6%95%B0%E9%A1%B6%E9%83%A8/</url>
    <content><![CDATA[<h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>由于我们每天都需要阅读陌生的源码，而debug的时候，又需要打断点，所以效率有些低，而且还需要寻找要在哪里打断点。</p>
<p>所以，借鉴GCC和LLVM都有对应的工具,他们可以在函数顶部和底部插入代码。</p>
<p>于是我就看下Babel这个库，我觉得它能操控JS的源代码，所以参阅了一些网络上的文章，并且把它实现了</p>
<p><del><a href="https://www.npmjs.com/package/babel-plugin-function-log" target="_blank" rel="noopener">npm库地址</a></del>，这个库不完美。<a href="https://www.npmjs.com/package/@freddyzeng/funlog" target="_blank" rel="noopener">funlog</a>完美，会继续完善一些常用操作</p>
<a id="more"></a>

<h1 id="代码效果"><a href="#代码效果" class="headerlink" title="代码效果"></a>代码效果</h1><p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/imgbabel-log.jpeg" alt="babel-log"></p>
<h1 id="CSS调试的猜想（正则替换脚本）"><a href="#CSS调试的猜想（正则替换脚本）" class="headerlink" title="CSS调试的猜想（正则替换脚本）"></a>CSS调试的猜想（正则替换脚本）</h1><p>根据上面JS的探索，可以从源码插入打印信息，然后在Chrome点击打印，直接跳到源代码位置。</p>
<ul>
<li><p>对于CSS文件：<br>Chrome本身支持CSS Debug，并且点击就可以调到对应的文件。</p>
</li>
<li><p>对于Sass或Less：<br>可是Sass和Less是编译后的CSS行号会有点不一样，编译成CSS的过程，会有各种替换。</p>
<p>CSS有一个属性Content，是可以添加标记内容的。我们在Sass或者Less源文件中，添加Content属性来标记CSS块在Sass或者Less中的位置，如果被HTML使用，就会Content就突出这个CSS来自于源文件中的第几行，是那个文件。</p>
<p>由于CSS都是用花括号括起来的，所以我们可以对Sass或者Less进行处理，用正则匹配{并且获取它的行数，插入文件名+行数，这样就能起到标记这个CSS{}的作用。</p>
</li>
</ul>
<p>当在Chrome Debug CSS的时候，选中DOM，就能看到一共引用CSS块在那个文件(Sass或者Less)的第几个行。<br>那些失效了，那些正在生效，这样就快速找到CSS在Sass或者Less中源代码的位置。如下图例子：</p>
<p>标记后的CSS（假设从Sass或者Less编译而来的）：</p>
<img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/imgCSS%E6%A0%87%E8%AE%B0.png" alt="CSS标记" style="zoom:50%;">

<p>在Chrome 中Debug CSS:</p>
<img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/imgHTML%E6%A0%87%E8%AE%B0.png" alt="HTML标记" style="zoom:30%;">



<h1 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h1><p>上面，仅仅是想到在JS文件中插入代码进行记录执行路径。可是我们的代码一般都是Vue单文件，或者是React的JS或者TS。所以我就继续寻找资料，我的思路如下：</p>
<ul>
<li><p>对于JS文件<br>所有的JS文件，都可以使用Babel来直接定位，因为会准确记录JS文件转换前的位置行数。所以打印log可以知道执行到哪里了。</p>
</li>
<li><p>对于Vue<br>对于Vue，它的单文件，我们可以把Script标签提取出来，然后使用Babel进行转换，再回填替换掉原来的<JavaScript></JavaScript>标签，首先提取可以用正则，或者Vue的模板编译提取。回填的话，直接用正则匹配替换原来的Script标签应该也是可行的</p>
<p>参考链接在这里<a href="https://stackoverflow.com/questions/47785382/convert-single-file-vue-components-to-javascript" target="_blank" rel="noopener"><strong>https://stackoverflow.com/questions/47785382/convert-single-file-vue-components-to-javascript</strong></a></p>
</li>
<li><p>对于React<br>React一般都是js文件，感觉也是可以直接使用Babel进行插入log定位执行路径<br>对于JSX，可以让Babel安装JSX插件</p>
</li>
<li><p>对于TS文件<br>参考链接<a href="https://github.com/dsherret/ts-type-info" target="_blank" rel="noopener">https://github.com/dsherret/ts-type-info</a><br><a href="https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API" target="_blank" rel="noopener">https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API</a></p>
</li>
<li><p>前端类似的终结工具者，<a href="https://github.com/facebook/jscodeshift" target="_blank" rel="noopener">jscodeshift</a></p>
<p>原来facebook，老早就有这种工具了，可以试下魔改一下。。做到类似的事情，兼容多种语言。。<br><a href="https://github.com/facebook/jscodeshift" target="_blank" rel="noopener">https://github.com/facebook/jscodeshift</a><br><a href="https://github.com/cpojer/js-codemod" target="_blank" rel="noopener">https://github.com/cpojer/js-codemod</a></p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>反正，我们工程师尽力想出工具去应对开发过程中遇到的困难，大神肯定都搞过相关的工具，我们站在巨人的肩膀上。</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>babel</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>babel</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>反思：我如何分析业务需求</title>
    <url>/2020/09/10/%E5%8F%8D%E6%80%9D%EF%BC%9A%E6%88%91%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E4%B8%9A%E5%8A%A1%E9%9C%80%E6%B1%82/</url>
    <content><![CDATA[<h1 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h1><p>最近，我离开了一个呆了快两年的台企企业，差不多4个月没有工作。</p>
<p>台企那么稳定，而且公司已经算是台湾第一第二的行业。里面的员工，基本就是我最新。大家都呆了6年左右，同事相互间气氛还好，招我进去的Leader呆了10几年，他是跟随公司成长的核心骨干。</p>
<a id="more"></a>

<p>如果问为什么要离职？可能就是觉得</p>
<ul>
<li>安逸</li>
<li>所做的工作提不起兴趣</li>
<li>想往技术气氛更好的公司发展</li>
<li>公司在深圳，我想回广州或佛山。因为考虑到孩子会长大，有空教教他们做作业，不想他们厌学吧</li>
</ul>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近入职了一家新公司，对业务不太熟悉，但是感觉公司的业务跟我上一家是有点相似的。<br>不过个人觉得，当前这家公司，更加接近工具，信息类型的平台。</p>
<p>造成这次delay，我就自己反思。在开发业务的过程中，遇到的问题：</p>
<ul>
<li>自己没认真看文档，理解文档能力稍弱</li>
<li>参加讨论，没有根据需求文档来分析</li>
<li>不熟悉现有的业务代码，代码关联性，业务依赖，代码-业务耦合等</li>
<li>都是自己一个人在开发自己的功能，最后才对接。导致业务对接的时候，对接不上。</li>
</ul>
<p>遇到问题，就要解决问题。这样才能进步。不然懵懵的，无法提升自己，干活低效率，浪费更多的生命在无聊的事情上</p>
<p>于是，结合以前的开发经验，进行自我反思。总结以思维导图展示如下(有些混乱，持续完善中)：</p>
<p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/img%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%9013.png" alt="需求分析13"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我就是错误在没有遵循最小流程跑通原则，没有及时执行，在现在项目工程中做不合理的尝试，而无法提前知道行不通</p>
<p>有空就多看看这些套路，参与需求分析的时候，就把他们一个个套出来</p>
<p>这里也有我以前自己总结的关于<a href="https://raw.githubusercontent.com/FreddyZeng/ReadingNotes/master/Learn/%E5%AD%A6%E4%B9%A0.png" target="_blank" rel="noopener">尝试提升学习的思维导图</a></p>
<p>如果有想到更好的点，我会不断完善</p>
<p>如果有更好想法或者技巧，可以分享给我。我会深度思考，如果我可以发现更进一步的idea，会再分享给你。这样我和你就有两个苹果了，共同进步</p>
<p>以上都是从开发角度，来分析需求，为了充分理解需求点。有些混乱，持续完善中</p>
<p>更多的需求分析维度方向，可参考下面链接，感觉文章是不错的，感谢作者分享</p>
<p><a href="https://waylau.com/requirement-analyse/" target="_blank" rel="noopener">https://waylau.com/requirement-analyse/</a></p>
<p>导图参考链接：</p>
<p><a href="https://mp.weixin.qq.com/s/u7geoZNpLtfr_crkXVHjAg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/u7geoZNpLtfr_crkXVHjAg</a></p>
]]></content>
      <categories>
        <category>自我提升</category>
        <category>业务</category>
      </categories>
      <tags>
        <tag>业务需求分析</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试提升自己的理解力</title>
    <url>/2020/09/17/%E5%B0%9D%E8%AF%95%E6%8F%90%E5%8D%87%E8%87%AA%E5%B7%B1%E7%9A%84%E7%90%86%E8%A7%A3%E5%8A%9B/</url>
    <content><![CDATA[<h1 id="一般来说，有3个方向思考-我们都听过"><a href="#一般来说，有3个方向思考-我们都听过" class="headerlink" title="一般来说，有3个方向思考(我们都听过)"></a>一般来说，有3个方向思考(我们都听过)</h1><p>是什么</p>
<p>为什么</p>
<p>怎么办</p>
<h1 id="最新结论"><a href="#最新结论" class="headerlink" title="最新结论"></a>最新结论</h1><p>建议直接看书《金字塔原理》（同事+公司推荐的）和《逻辑学导论》，金字塔原理比较好。</p>
<p>example标题是原文，如果有空就补充一篇自己的《金字塔读后感》，这篇日志就不再更新了。</p>
<p>《金字塔原理》的作者基本上就是把思维的活动，通过清晰的文字来表达出来了。思维活动无非就是演绎+归纳，还有一个就是先建立猜想，再去验证。我自己笨，一直寻找了很久资料。。</p>
<p>我一开始以为是《金字塔原理》是引导如何表达，其实里面也含有阅读技巧，和提炼文本表达的重点。</p>
<p>《金字塔原理》并且解析了，上下文不够清晰的时候，人的理解会有很多种(归纳推理)。</p>
<p>我自己的举例子：为什么一千读者，有一千个哈姆雷特。个人猜想，因为《哈姆雷特》作者没有直接陈述哈姆雷特，而且通过阅读主人公的行为（侧面描写），都是通过每个读者自己的归纳推理，去了解主人公哈姆雷特。因为上下文不够清晰的时候，理解会有很多种(归纳推理)。所以，最理解《哈姆雷特》的只有作者自己了吧？或许有人真正能感悟到作者的表达吧。</p>
<a id="more"></a>

<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>最简单的，就是理解一个句子。</p>
<p>一个句子，可以表达什么？</p>
<p>可以形容一个主语，也就是形容词。如果在计算机技术中，一般都是对专业术语的特征描述</p>
<p>主语+发生了什么动作或者行为</p>
<p>主语+通过动作和行为+宾语，做了什么，影响了谁</p>
<p>上面带有动作和行为的，可以选择条件限制，如地点，时间</p>
<p>以上是最基本的理解，通过以上的基本理解，我们可以关注，各个主语和动作之间的联系。</p>
<p>可是以上的思考，感觉是远远不够的。或者说，大脑如果读一个句子，就反复询问自己是什么，为什么，怎么办，这样会不会太过低效率呢？而且有些句子，是具有上下文联系的，受上下文影响。</p>
<p>所以我们尝试把思考句子（是什么为什么怎么办）放到思考段落？（或者说，控制句子数量，3到5句就提炼一次）</p>
<h1 id="如何提炼呢？"><a href="#如何提炼呢？" class="headerlink" title="如何提炼呢？"></a>如何提炼呢？</h1><p>用最简练的句子，提炼出这个段落说了什么，怎么用，为什么（建立自己理解的场景，建立场景是指有什么东西，做了什么行为，让什么东西发生了变化，或者说提供了什么功能。</p>
<p>一篇文章的传达作者的概念或者观点。或者说，在自己搜集知识的时候。知识点都是从单一功能，逐渐添加各种拓展的情形。如何记住它们，并且理解它们呢？</p>
<p>描述的专业术语是什么，这个专业术语是由什么结构什么成分组成的，理解组成和成分（是什么）</p>
<p>这个专业术语，它能提供什么样的功能，这些功能都是在什么场景下使用的（怎么用）</p>
<p>最好还要理解为什么要这么用，这么设计，强化自己的异常处理能力（为什么）</p>
<p>当前需要理解的这个专业术语有没有可能和其它的专业术语，有关联，使用其它专业术语的功能，或者被其它专业术语使用，理解它们的关系</p>
<p>如果无法对它们进行联系，我们就无法联想</p>
<p>为了联想，</p>
<p>我们可以根据相似的功能进行联想（知识点相似性），或者说，它依赖了什么来实现自己的功能，它们是怎么运作的，它依赖的东西，具有什么样的功能和特征</p>
<p>我们也可以从概念的组成的方向进行联想到其它的概念，并且获得其它概念的功能和特征（是什么），</p>
<p>我们也可以从这个概念是如何运作的场景开始联想（怎么用）</p>
<p>当遇到自己无法达到想要的结果的时候，想想知识点的应用场景，思考它们为什么可以这样</p>
<p>用最简练的句子，提炼出这个段落说了什么，我们就顺着作者的思路去理解知识点是什么，怎么用，为什么。遇新的概念的时候，就寻找它和其它已知的概念的联系，它们怎么运作的</p>
<h1 id="阅读过文章，如何记住概念呢？"><a href="#阅读过文章，如何记住概念呢？" class="headerlink" title="阅读过文章，如何记住概念呢？"></a>阅读过文章，如何记住概念呢？</h1><p>优先记忆动词？（通过建立一个场景，或者一个动画来记忆？）</p>
<p>因为动词是可以联想到发生了什么事情。再联想到是谁做的和对谁做的。所以寻找动词，很重要。</p>
<p>如果你的脑子记忆一个序列的物体容易，还是记忆一些列的动画容易呢？（比如有些电影，电视剧，看过一边还能回忆一些场景。</p>
<p>而给你一系列物体序列，没有场景，这样是否记忆难度就相对大了呢？如果问我怎么知道的，只能说自己探索的，多探索自身的生理规律吧，我目前解析不了。。）</p>
<p>所以我会尝试把身边需要记忆的东西，都在脑子中建立动画，并且反复训练自己。看看自己是否有提升。</p>
<h1 id="如果是技术文档类"><a href="#如果是技术文档类" class="headerlink" title="如果是技术文档类"></a>如果是技术文档类</h1><p>一般都是描述当前的主语，它的动作有什么，并且这个动作依赖什么参数。通过动作来提供功能，也就是程序应用接口API</p>
<p>所以，需要记忆动作（有什么功能?）。然后联想到当前的主语，再联想主语有其它什么功能</p>
<p>如果要探究技术类的原理，就应该先探究这个专业术语的从组成入手和它的特征，它的文档（提供什么样的功能，它的功能依赖什么子功能实现的？）。无限递归探索专业术语</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上都是一些自我探索，会努力刻意练习，尝试提高自己的理解力。努力在脑海中建立动画模型！<br>如果有更好的方法，我会更新</p>
<p>另外，阅读一些段落文字。可以试下从时间轴，空间，由里到外，由外到里，由局部到全局，由全局到局部尝试进行分类关联。总结再多，也是一时感悟，还是需要反复琢磨加深理解，形成自己的分析套路吧</p>
]]></content>
      <categories>
        <category>自我提升</category>
        <category>认知</category>
      </categories>
      <tags>
        <tag>理解力</tag>
        <tag>认知</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Git掌控项目</title>
    <url>/2020/09/29/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E6%8E%8C%E6%8E%A7%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>作为开发者，我们都需要使用Git。无论是开源项目，还是企业项目，我们都需要回溯历史变动。查询某个功能是什么时候添加的，我们想查看它的演变就可以了（因为Git就是按照时间轴标记commit的）。</p>
<a id="more"></a>

<h1 id="如何使用git回溯历史"><a href="#如何使用git回溯历史" class="headerlink" title="如何使用git回溯历史"></a>如何使用git回溯历史</h1><p>如果从项目中，找到某个变量，但是想知道这个变量的所有commit信息</p>
<p>这时我们就可以使用下面g代码it log进行搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -S <span class="string">'关键字'</span></span><br></pre></td></tr></table></figure>

<p>这些commit是从最晚到最早提交进行排序的结果列表，这样可以查看最近的’关键字’变动</p>
<p>如果对git log 非常熟悉的，就不用往下看了。。我是想记录一些自己的感想，认为对工作，对个人提升有帮助的点。</p>
<h1 id="基于git-log的技巧"><a href="#基于git-log的技巧" class="headerlink" title="基于git log的技巧"></a>基于git log的技巧</h1><h2 id="问题1-我们有时候，就是不知道这个变量是怎么来的，无法了解它的逻辑和实现"><a href="#问题1-我们有时候，就是不知道这个变量是怎么来的，无法了解它的逻辑和实现" class="headerlink" title="问题1:我们有时候，就是不知道这个变量是怎么来的，无法了解它的逻辑和实现"></a>问题1:我们有时候，就是不知道这个变量是怎么来的，无法了解它的逻辑和实现</h2><h3 id="猜想：如果我们能从项目中，寻找这个变量，是从那个commit开始提交的，这样我们是不是就可以回溯它的演变了？（包括阅读开源项目）"><a href="#猜想：如果我们能从项目中，寻找这个变量，是从那个commit开始提交的，这样我们是不是就可以回溯它的演变了？（包括阅读开源项目）" class="headerlink" title="猜想：如果我们能从项目中，寻找这个变量，是从那个commit开始提交的，这样我们是不是就可以回溯它的演变了？（包括阅读开源项目）"></a>猜想：如果我们能从项目中，寻找这个变量，是从那个commit开始提交的，这样我们是不是就可以回溯它的演变了？（包括阅读开源项目）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --reverse -S <span class="string">'关键字'</span></span><br></pre></td></tr></table></figure>

<p>比如我想查看v-on在vue中的实现，第一个想到的是使用编辑器或者grep/rg全局搜索。</p>
<p>因为Vue项目基于git，我们有更好的方式（不用全局搜索），那就是把问题转换为寻找第一个含有’<strong>v-on</strong>‘的commit记录，然后从中探索它的实现过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --reverse -S <span class="string">'v-on'</span></span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/img%E6%88%AA%E5%B1%8F2020-09-29%20%E4%B8%8B%E5%8D%881.21.19.png" alt="截屏2020-09-29 下午1.25.49" style="zoom:33%;">

<p>可是这样子还是不够友好，因为并没有列出包含’<strong>v-on</strong>‘的记录到底在文件中哪里，仅仅列出了commit信息</p>
<p>所以我们可以给 git log 添加 -p参数，让记录直接输出到stdout，然后我们可以继续添加grep进行关键字过滤结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --reverse -p -S <span class="string">'v-on'</span> | grep -iE <span class="string">"(^commit\b|^diff\b|v-on)"</span> -A 3 -B 3 -m 30</span><br><span class="line"></span><br><span class="line">-m是为了避免记录过多，限制加载次数。再git checkout 到最后一个commit，就可以继续查看记录（大工程频繁git checkout很慢）</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --reverse -p -S <span class="string">'v-on'</span> &lt;上一次最后输出的commit <span class="built_in">hash</span>&gt;..&lt;最新的commit <span class="built_in">hash</span>或者分支名字&gt; | grep -iE <span class="string">"(^commit\b|^diff\b|v-on)"</span> -A 3 -B 3 -m 30（-m 是限制匹配输出30次，防止过多匹配）</span><br><span class="line"></span><br><span class="line">如果有些文件是在一行过长，可以用rg -M 限制一行的byte大小，这样过长的一行就会被跳过</span><br><span class="line">git <span class="built_in">log</span> --reverse -p -S <span class="string">'v-on'</span> &lt;上一次最后输出的commit <span class="built_in">hash</span>&gt;..&lt;最新的commit <span class="built_in">hash</span>或者分支名字&gt; | rg -e <span class="string">"(^commit\b|^diff\b|v-on)"</span> -A 3 -B 3 -M 500</span><br><span class="line"></span><br><span class="line">如果有大量的匹配，一时之间停不下来，-m限制匹配出现次数来终止。也可以执行commit的范围来决定匹配，因为我们没法知道关键字都集中在那一个范围，所以这样会有点被动。</span><br><span class="line"></span><br><span class="line">取HEAD后的第20个commit <span class="built_in">hash</span>如下：</span><br><span class="line">git rev-list HEAD..master | tail -20 | head -1</span><br><span class="line">这样把上面的结果，放到前面的&lt;最新的commit <span class="built_in">hash</span>或者分支名字&gt;,就可以知道范围查找，避免停不下来。</span><br><span class="line"></span><br><span class="line">一般来说，可以用git checkout HEAD~1（HEAD向后，也就是向下）</span><br><span class="line">也可以用git checkout head^1 来控制跳到那个父commit（如果当前的commit，有多个合并来源，它可以从多个父来源方向选择一个进行回退）</span><br><span class="line"></span><br><span class="line">让HEAD向前，也就是向上移动</span><br><span class="line">git checkout -（类似<span class="built_in">cd</span> -，返回上一次记录）</span><br><span class="line">git checkout $(git rev-list HEAD..master | tail -1| head -1)（如果要指定向前多少步，修改 tail 的参数）</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/img%E6%88%AA%E5%B1%8F2020-09-29%20%E4%B8%8B%E5%8D%881.25.49.png" alt="截屏2020-09-29 下午1.21.19" style="zoom:33%;">

<p>太幸运了，我们在第一个commit，就看到Vue作者写的v-on正则，并且是|和@连接，所以@和v-on是同一个匹配规则，就是这么来的。</p>
<p>接下来我们就可以继续翻阅v-on的相关代码演进，这里就不演示了</p>
<p>除了-S之外，使用-G参数让git log支持正则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --reverse -G <span class="string">'v-on'</span></span><br></pre></td></tr></table></figure>

<h2 id="问题2：如果我是不太明白这个文件中的某个函数是怎么演进到目前这个状态逻辑的，怎么办呢？"><a href="#问题2：如果我是不太明白这个文件中的某个函数是怎么演进到目前这个状态逻辑的，怎么办呢？" class="headerlink" title="问题2：如果我是不太明白这个文件中的某个函数是怎么演进到目前这个状态逻辑的，怎么办呢？"></a>问题2：如果我是不太明白这个文件中的某个函数是怎么演进到目前这个状态逻辑的，怎么办呢？</h2><h3 id="我们可以使用git-log-L追溯某个文件的变动"><a href="#我们可以使用git-log-L追溯某个文件的变动" class="headerlink" title="我们可以使用git log -L追溯某个文件的变动"></a>我们可以使用git log -L追溯某个文件的变动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 文件中，某段范围的演变记录回溯</span><br><span class="line">git <span class="built_in">log</span> -L &lt;开始行号&gt;,&lt;结束行号&gt;:&lt;文件路径&gt;</span><br><span class="line">// 按函数名追溯(有时候不使用,可能跟语法词法有关需要合适的语言)</span><br><span class="line">git <span class="built_in">log</span> -L :&lt;函数名&gt;:&lt;文件路径&gt;</span><br><span class="line">// 整个文件记录回溯</span><br><span class="line">git <span class="built_in">log</span> --follow &lt;文件路径&gt;</span><br></pre></td></tr></table></figure>

<p>这个我就不展示了，可以自己尝试，结合grep或者rg获取关键字的位置</p>
<h1 id="git-reflog查看git所有操作记录"><a href="#git-reflog查看git所有操作记录" class="headerlink" title="git reflog查看git所有操作记录"></a>git reflog查看git所有操作记录</h1><p>使用 git reflog，可以查看一些本地git的操作日志</p>
<h1 id="持续完善"><a href="#持续完善" class="headerlink" title="持续完善"></a>持续完善</h1>]]></content>
      <categories>
        <category>git</category>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>快慢指针的相遇点问题分析</title>
    <url>/2020/08/23/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E7%9A%84%E7%9B%B8%E9%81%87%E7%82%B9%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="快慢指针问题"><a href="#快慢指针问题" class="headerlink" title="快慢指针问题"></a>快慢指针问题</h1><p>比如这种链表<a href="https://zhuanlan.zhihu.com/p/72886883" target="_blank" rel="noopener">快慢指针题目</a></p>
<p>判断是否有环，如果有环，怎么计算到环的入口呢？</p>
<p>判断是否有环，快慢指针是否能相遇就可以知道了。现在我们假设这个链表存在环，求环的入口。</p>
<a id="more"></a>

<p>如下图：</p>
<img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/imgpoint.008.jpeg" alt="point.008" style="zoom:50%;">

<p>若b的速度是a的两倍，a和b同时从起点出发，绕环顺时针跑</p>
<img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/imgpoint.009.jpeg" alt="point.009" style="zoom:50%;">

<p>如果慢指针a刚进入环的时候，快指针b应该已经在环的前面了。而且由于b的速度是a的两倍，所以Oa‘的距离等于a’b‘的距离。</p>
<img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/imgpoint.010.jpeg" alt="point.010" style="zoom:50%;">

<p>现在我们不考虑上图a’和b’的距离（这个距离等于链头到环入口的距离Oa‘）。假设a和b都是在环上，并且在同一个原定O上顺时针，分析他们的相遇点的情形，如下</p>
<img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/imgpoint.011.jpeg" alt="point.011" style="zoom:50%;">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果遇到一些复杂的问题，我们可以先考虑它的简单情形，然后再考虑让这个简单的情形，如何迁移到复杂的问题。或者把复杂的问题，抛开一些变量因素，进行单独枚举情形到结果。</p>
<p>当慢指针a和快指针b相遇后。再用另外一个指针从链头跑，并且都是跑1步，慢指针也是跑1步，这样他们到环入口的距离是相等的，所以就会在环的入口相遇。</p>
<p>不用公式，通过枚举理解它，为什么当相遇后，用一个指针从链头和相遇点，以1步的速度同时向前，慢指针和链头为起点的指针就会相遇在环的入口。</p>
]]></content>
      <categories>
        <category>分析</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>快慢指针</tag>
        <tag>相遇问题</tag>
        <tag>分析</tag>
      </tags>
  </entry>
  <entry>
    <title>我对动态规划的理解</title>
    <url>/2020/08/22/%E6%88%91%E5%AF%B9%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="动态规划的思考"><a href="#动态规划的思考" class="headerlink" title="动态规划的思考"></a>动态规划的思考</h2><p>首先，算法一般是可以用枚举来发现规律的，不是100%，因为有些问题的计算，是可以通过数学公式反而直接算出来了</p>
<a id="more"></a>

<p>算法都是一个过程，从规模从小到大发现规律或者从规模大到小发现规律</p>
<ul>
<li><p>递推问题规律</p>
<ul>
<li>从规模小的问题到规模大的问题，规模大的问题依赖仅仅规模小的问题的结果，那么这样可以避免重复计算小规模的问题。比如求一个等差数列的和，这种问题，就是仅仅依赖了前一个子问题的结果<br>比如，1，2，3，4，… 这个数列如果不用公式计算，就是不断累加前一次的结果。</li>
<li>规模大的问题，依赖多个小规模的问题的结果，这种情况下就很可能存在重复计算，为什么呢？<br>比如斐波那契数列，如f(n) = f(n-1) + f(n-2) -&gt; f(n) = (f(n-2) + f(n-3)) + f(n-2)，如果f(n-2)这个函数没有计算缓存的话，那么就会导致重复计算。有解决办法吗？有，存储已经计算过的值，如果当前这个规模问题已经计算过就立即返回结果，备忘录模式</li>
</ul>
</li>
<li><p>路径问题规律</p>
<ul>
<li><p>比如路径问题，寻找从A点到B点，有多少条路径。因为目标比较明确，从感觉上来看，这个问题和规模B点的问题相关性最大，所以如果从A点作为思考，这会出现一个问题，有些情况下需要考虑回溯。<br>如下图：<br><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/imgDynamicProgramming.002.jpeg" alt="DynamicProgramming.002"></p>
<ol>
<li><p>如果上面是A到B的移动过程中，只能往左边或者右边移动的时候。A可能存在直接走到最右则，而无法到达B，因为题设条件限制。所以这时从A思考，会产生回溯，当某一步不能达到目标的时候，要回退上一次的计算，并且选择另外一个路径执行（基于计算另外一个能够达到目标的子问题）。所以，就产生了不确定性，需要回溯，可以根据B的X和Y坐标，控制边界，减少不必要的回溯。</p>
</li>
<li><p>如果上面的问题是从目的地思考，反推上一步的来源。那么这个问题就清晰了。由于题设限制只能往右边或者下边移动，所以到达B点时，肯定是从左边或者从上边的格子过来的。这样问题就清晰了，到达B点，从B的左边格子过来+从B的上边格子过来这两种情况，通过枚举情形，问题是确定的，而且这些计算不用回溯，控制好逆向的路径，不越过A的X和Y坐标就好了。直到接近A点。不过，当前这种从规模高到低的问题，存在重复计算的问题，需要设置计算缓存（备忘录模式）</p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>如果从上方考到思考过程，我们可以枚举一下情形，从小规模到大规模，或者从大规模到小规模来寻找思路。</p>
<h3 id="状态转移方程–待续"><a href="#状态转移方程–待续" class="headerlink" title="状态转移方程–待续"></a>状态转移方程–待续</h3><h3 id="最优子结构–待续"><a href="#最优子结构–待续" class="headerlink" title="最优子结构–待续"></a>最优子结构–待续</h3><h4 id="边界–待续"><a href="#边界–待续" class="headerlink" title="边界–待续"></a>边界–待续</h4>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>简单分析魔方的转动</title>
    <url>/2020/08/23/%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90%E9%AD%94%E6%96%B9%E7%9A%84%E8%BD%AC%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="魔方转动"><a href="#魔方转动" class="headerlink" title="魔方转动"></a>魔方转动</h1><p>如果一个完好的魔方，被转动一次，我们很容易可以还原，转动二次，还可以。可是转动越多，逆向操作恢复完好就越难。</p>
<p>目前已经有很多公式可以还原魔方。</p>
<p>可是公式是如何推导出来的呢？太高深的数学不懂，那就用枚举法分析它</p>
<p>那么我们就自己简单分析一下魔方的行为吧</p>
<a id="more"></a>

<h1 id="枚举单次转动魔方情况"><a href="#枚举单次转动魔方情况" class="headerlink" title="枚举单次转动魔方情况"></a>枚举单次转动魔方情况</h1><p>魔方是立体的，所以把它看成二维的图，方便分析，如下情形，我们先分析一个面单次转动是怎么样的，会改动到那些面</p>
<p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/img%E9%AD%94%E6%96%B9.001.jpeg" alt="魔方.001"></p>
<p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/img%E9%AD%94%E6%96%B9.002.jpeg" alt></p>
<p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/img%E9%AD%94%E6%96%B9.003.jpeg" alt="魔方.003"></p>
<p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/img%E9%AD%94%E6%96%B9.004.jpeg" alt="魔方.004"></p>
<p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/img%E9%AD%94%E6%96%B9.005.jpeg" alt="魔方.005"></p>
<p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/img%E9%AD%94%E6%96%B9.006.jpeg" alt="魔方.006"><br>以上就是6个面的情况，可是这仅仅是单个面自己转动会影响的其它面<br>仅仅转动一个面，肯定会影响其它4个面的4条边</p>
<h1 id="相邻面的转动"><a href="#相邻面的转动" class="headerlink" title="相邻面的转动"></a>相邻面的转动</h1><p>仅仅转动一个面，只能让它相邻的边进行变换。所以这是不够的</p>
<p>因为无论你怎么转动，都是由单次转动魔方得来的。</p>
<p>如果想知道魔方的色块移动规律，相邻面的转动规律很重要，因为这可以跨页面改变色块的位置。</p>
<p>比如下图，转动红色和黄色，就会产生不一样的情况</p>
<p><img src="https://raw.githubusercontent.com/FreddyZeng/BlogImg/master/img%E9%AD%94%E6%96%B9.007.jpeg" alt="魔方.007"></p>
<p>所以，如果给时间我去熟练魔方的话，我会先从单面魔方的转动位置记住它的情形。</p>
<p>然后再记住相邻面的转动位置记住。</p>
<p>再下面的，就是三个相邻面的转动情形。。。</p>
<p>上面都是简单的猜想😆，不知道是否可行</p>
]]></content>
      <categories>
        <category>分析</category>
      </categories>
      <tags>
        <tag>分析</tag>
        <tag>魔方</tag>
      </tags>
  </entry>
  <entry>
    <title>获取最长回文子串详解</title>
    <url>/2020/07/20/%E8%8E%B7%E5%8F%96%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%97%E5%AD%90%E4%B8%B2%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h1><p>题目：给定一个字符串，求它的最长回文子串的长度。</p>
<p>最长回文子串，比如 aba,或者 abccba这样的。</p>
<p>原文解法一理解比较简单，解法二有些技巧</p>
<h1 id="原文的解法一枚举法"><a href="#原文的解法一枚举法" class="headerlink" title="原文的解法一枚举法"></a>原文的解法一枚举法</h1><p>这种是一种技巧。</p>
<p>我们既然要求回文字符串，而回文字符串时以字符串中间为对称的。</p>
<p>所以，我们可以假设在源字符串S中，假设源字符串S的每个字符都作为回文子串的中心，</p>
<p>在这个中心往左边和右边进行比较字符串是否相等，直到不等的时候，就是这个字符位置的</p>
<p>回文子串了。</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>我们可以从给定的原文S，比如“cbcde”中，</p>
<p>c作为中心，它左边没有字符，所以回文子串为c。</p>
<p>b作为中心，它左边是c，右边是c。所以回文子串长度为cbc。</p>
<p>以c为中心，它左边是b，右边是d。所以回文子串为c。</p>
<p>。。。</p>
<a id="more"></a>

<h1 id="原文的解法二"><a href="#原文的解法二" class="headerlink" title="原文的解法二"></a>原文的解法二</h1><p>解法二，本质上也是需要计算出字符串每个位置的回文子串长度。</p>
<p><strong>而解法二核心思想是为了在从左边位置向右边计算的过程中，记录当前最大的回文字符串，在新的位置计算回文字符串的时候，利用对称原理，跳过了部分长度来计算回文子串，减少了计算。</strong></p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p><strong>为什么求i的最长回文子串长度，需要用到p[j]的值？</strong></p>
<p>首先 p[j]存放的是p[j]回文子串的半程(j点到以j为中心的最大回文子串的右端)，也就是j+p[j] 等于p的回文子串的最右端。</p>
<p>这是因为i和j是以ID为对称的点，并且p[j]是已经记过计算的位置。</p>
<p>所以如果以j为对称中心的回文子串有一定的长度（原文图中绿色框选择的部分），再根据以ID(也是计算出来的)为中心的回文子串关系（对称ID关系），所以p[j]应该就要对称到i的附近（i的绿色部分），可能会超出mx。所以需要和mx比较取小值。因为求i点的回文子串的时候，我们只能根据已知的点的特征，去跳过已知的点对称关系。大于mx的都是不一定在以i为中心的回文子串对称的，所以需要从这个位置继续求i的回文子串了。</p>
<p><strong>为什么2*id - i 就是 以id为中心的j点的位置呢？</strong></p>
<p>可以看成是id + (id - i)，从原文的图，可以知道</p>
<p>id到i的距离等于 (id - i)的绝对值，因为需要从id的位置往回走，所以以id为中心，与i对象的j点的计算是 id -|(id-i)|（也就是2*id - i）。为什么是2id-i呢，这是因为，id-i本身就是负数，被省略了。。</p>
<p><strong>原文中的id，如果大于0，它是一定比i小的，为什么呢？</strong></p>
<p>因为id是由i计算生成的，而i是从左到右的。</p>
<p><strong>为什么需要获取p[j]和 mx-i的最小值呢？</strong></p>
<p>因为求i点的回文子串的时候，我们只能根据已知的点的特征，去跳过已知的点对称关系。大于mx的都是不一定在以i为中心的回文子串对称的，所以需要从这个位置继续求i的回文子串了。</p>
<p><strong>为什么插入#后一定会是奇数呢？</strong></p>
<p>这是因为2n + 1一定是奇数（n为原文字符串的长度），这个高中数学我们学过。</p>
<p>n &gt; 0, 2n一定是偶数，所以2n+1一定是奇数。</p>
<p>不过它是对源文字符串的间隙插入了n+1个#分割符号（n为原文字符串的长度），生成一个奇数的新的原文字符串</p>
<h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><p>重点来了，如果直接看原文，会有一点点难以理解它的动机。</p>
<p>这是一个过程计算。我们模拟它来理解</p>
<p>p存放的是回文子串半程，它是以某点为中心的最大回文子串的中心点到该最大回文子串的最右端的距离</p>
<ul>
<li><p>首先从s源文的位置1开始，也就是i=1，因为0是$符号。<br>进行for循环，这里的循环意义是，为每一个位置i都计算出最大回文子串半程的值，存放在p里面。</p>
</li>
<li><p>获取p[i],也就是i点的最大回文子串的值，这个值是根据已知的对称性质得知的<br>进行for循环，这里的循环意义是，为每一个位置i都计算出最大回文子串半程的值，存放在p里面。</p>
<p>p[i] = mx &gt; i ? min(p[2 * id - i], mx - i) : 1;// 获取求i点最大回文子串时，根据对称原理和j点（2*id-i已经计算出的回文子串半程），i点回文子串的距离</p>
<p>一开始这里p[1] = 1;</p>
<p>首先，一开始我们没有计算出以ID为范围的最大回文子串，根据mx和i的比较也可以知道。</p>
</li>
<li><p>根据获取到的p[i]，跳过部分距离计算i点的最大回文子串<br>然后我们进入while它的初始语句是，s[i + p[i]] == s[i - p[i]]。以i为中心，跳过距离来比较，如果相等，增加P[i]，也就是增加i点的回文子串半程。然后继续往两边比较，更新i的最大回文子串。</p>
<p>当s[i + p[i]] == s[i - p[i]] 不成立时，以i点为中心的最大回文子串的右端已经算出。</p>
</li>
<li><p>更新计算id和mx<br>此时比较mx 和 以i点为中心的最大回文子串的右端，看看那个大。</p>
<p>如果新计算的i比原来记录的id 和mx大，那么更新id和mx。</p>
</li>
</ul>
<p>所以id和mx是从i计算出来的。</p>
<p>i一定是比id大。（从左往右计算的）</p>
<p>回到for ，并且增加i，计算下一个位置的最大回文子串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;输入，并处理得到字符串s</span><br><span class="line">int p[1000], mx &#x3D; 0, id &#x3D; 0;</span><br><span class="line">memset(p, 0, sizeof(p));</span><br><span class="line">for (i &#x3D; 1; s[i] !&#x3D; &#39;\0&#39;; i++) </span><br><span class="line">&#123;</span><br><span class="line">    p[i] &#x3D; mx &gt; i ? min(p[2 * id - i], mx - i) : 1;</span><br><span class="line">    while (s[i + p[i]] &#x3D;&#x3D; s[i - p[i]]) </span><br><span class="line">        p[i]++;</span><br><span class="line">    if (i + p[i] &gt; mx) </span><br><span class="line">    &#123;</span><br><span class="line">        mx &#x3D; i + p[i];</span><br><span class="line">        id &#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;找出p[i]中最大的</span><br></pre></td></tr></table></figure>

<h1 id="引用原文"><a href="#引用原文" class="headerlink" title="引用原文"></a>引用原文</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考原文</span><br><span class="line">https:&#x2F;&#x2F;wizardforcel.gitbooks.io&#x2F;the-art-of-programming-by-july&#x2F;content&#x2F;01.05.html</span><br><span class="line">最长回文子串</span><br><span class="line">题目描述</span><br><span class="line">给定一个字符串，求它的最长回文子串的长度。</span><br><span class="line">分析与解法</span><br><span class="line">最容易想到的办法是枚举所有的子串，分别判断其是否为回文。这个思路初看起来是正确的，但却做了很多无用功，如果一个长的子串包含另一个短一些的子串，那么对子串的回文判断其实是不需要的。</span><br><span class="line">解法一</span><br><span class="line">那么如何高效的进行判断呢？我们想想，如果一段字符串是回文，那么以某个字符为中心的前缀和后缀都是相同的，例如以一段回文串“aba”为例，以b为中心，它的前缀和后缀都是相同的，都是a。</span><br><span class="line">那么，我们是否可以可以枚举中心位置，然后再在该位置上用扩展法，记录并更新得到的最长的回文长度呢？答案是肯定的，参考代码如下：</span><br><span class="line">int LongestPalindrome(const char *s, int n)</span><br><span class="line">&#123;</span><br><span class="line">    int i, j, max,c;</span><br><span class="line">    if (s &#x3D;&#x3D; 0 || n &lt; 1)</span><br><span class="line">        return 0;</span><br><span class="line">    max &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; n; ++i) &#123; &#x2F;&#x2F; i is the middle point of the palindrome  </span><br><span class="line">        for (j &#x3D; 0; (i - j &gt;&#x3D; 0) &amp;&amp; (i + j &lt; n); ++j)&#123; &#x2F;&#x2F; if the length of the palindrome is odd  </span><br><span class="line">            if (s[i - j] !&#x3D; s[i + j])</span><br><span class="line">                break;</span><br><span class="line">            c &#x3D; j * 2 + 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (c &gt; max)</span><br><span class="line">            max &#x3D; c;</span><br><span class="line">        for (j &#x3D; 0; (i - j &gt;&#x3D; 0) &amp;&amp; (i + j + 1 &lt; n); ++j)&#123; &#x2F;&#x2F; for the even case  </span><br><span class="line">            if (s[i - j] !&#x3D; s[i + j + 1])</span><br><span class="line">                break;</span><br><span class="line">            c &#x3D; j * 2 + 2;</span><br><span class="line">        &#125;</span><br><span class="line">        if (c &gt; max)</span><br><span class="line">            max &#x3D; c;</span><br><span class="line">    &#125;</span><br><span class="line">    return max;</span><br><span class="line">&#125;</span><br><span class="line">代码稍微难懂一点的地方就是内层的两个 for 循环，它们分别对于以 i 为中心的，长度为奇数和偶数的两种情况，整个代码遍历中心位置 i 并以之扩展，找出最长的回文。</span><br><span class="line">解法二、O(N)解法</span><br><span class="line">在上文的解法一：枚举中心位置中，我们需要特别考虑字符串的长度是奇数还是偶数，所以导致我们在编写代码实现的时候要把奇数和偶数的情况分开编写，是否有一种方法，可以不用管长度是奇数还是偶数，而统一处理呢？比如是否能把所有的情况全部转换为奇数处理？</span><br><span class="line">答案还是肯定的。这就是下面我们将要看到的Manacher算法，且这个算法求最长回文子串的时间复杂度是线性O(N)的。</span><br><span class="line">首先通过在每个字符的两边都插入一个特殊的符号，将所有可能的奇数或偶数长度的回文子串都转换成了奇数长度。比如 abba 变成 #a#b#b#a#， aba变成 #a#b#a#。</span><br><span class="line">此外，为了进一步减少编码的复杂度，可以在字符串的开始加入另一个特殊字符，这样就不用特殊处理越界问题，比如$#a#b#a#。</span><br><span class="line">以字符串12212321为例，插入#和$这两个特殊符号，变成了 S[] &#x3D; &quot;$#1#2#2#1#2#3#2#1#&quot;，然后用一个数组 P[i] 来记录以字符S[i]为中心的最长回文子串向左或向右扩张的长度（包括S[i]）。</span><br><span class="line">比如S和P的对应关系：</span><br><span class="line">S # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #</span><br><span class="line">P 1 2 1 2 5 2 1 4 1 2 1 6 1 2 1 2 1</span><br><span class="line">可以看出，P[i]-1正好是原字符串中最长回文串的总长度，为5。</span><br><span class="line">接下来怎么计算P[i]呢？Manacher算法增加两个辅助变量id和mx，其中id表示最大回文子串中心的位置，mx则为id+P[id]，也就是最大回文子串的边界。得到一个很重要的结论：</span><br><span class="line">如果mx &gt; i，那么P[i] &gt;&#x3D; Min(P[2 * id - i], mx - i)</span><br><span class="line">C代码如下：</span><br><span class="line">&#x2F;&#x2F;mx &gt; i，那么P[i] &gt;&#x3D; MIN(P[2 * id - i], mx - i)</span><br><span class="line">&#x2F;&#x2F;故谁小取谁</span><br><span class="line">if (mx - i &gt; P[2*id - i])</span><br><span class="line">    P[i] &#x3D; P[2*id - i];</span><br><span class="line">else  &#x2F;&#x2F;mx-i &lt;&#x3D; P[2*id - i]</span><br><span class="line">    P[i] &#x3D; mx - i;</span><br><span class="line">下面，令j &#x3D; 2*id - i，也就是说j是i关于id的对称点。</span><br><span class="line">当 mx - i &gt; P[j] 的时候，以S[j]为中心的回文子串包含在以S[id]为中心的回文子串中，由于i和j对称，以S[i]为中心的回文子串必然包含在以S[id]为中心的回文子串中，所以必有P[i] &#x3D; P[j]；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当 P[j] &gt;&#x3D; mx - i 的时候，以S[j]为中心的回文子串不一定完全包含于以S[id]为中心的回文子串中，但是基于对称性可知，下图中两个绿框所包围的部分是相同的，也就是说以S[i]为中心的回文子串，其向右至少会扩张到mx的位置，也就是说 P[i] &gt;&#x3D; mx - i。至于mx之后的部分是否对称，再具体匹配。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">此外，对于 mx &lt;&#x3D; i 的情况，因为无法对 P[i]做更多的假设，只能让P[i] &#x3D; 1，然后再去匹配。</span><br><span class="line">综上，关键代码如下：</span><br><span class="line">&#x2F;&#x2F;输入，并处理得到字符串s</span><br><span class="line">int p[1000], mx &#x3D; 0, id &#x3D; 0;</span><br><span class="line">memset(p, 0, sizeof(p));</span><br><span class="line">for (i &#x3D; 1; s[i] !&#x3D; &#39;\0&#39;; i++) </span><br><span class="line">&#123;</span><br><span class="line">    p[i] &#x3D; mx &gt; i ? min(p[2 * id - i], mx - i) : 1;</span><br><span class="line">    while (s[i + p[i]] &#x3D;&#x3D; s[i - p[i]]) </span><br><span class="line">        p[i]++;</span><br><span class="line">    if (i + p[i] &gt; mx) </span><br><span class="line">    &#123;</span><br><span class="line">        mx &#x3D; i + p[i];</span><br><span class="line">        id &#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;找出p[i]中最大的</span><br><span class="line">此Manacher算法使用id、mx做配合，可以在每次循环中，直接对P[i]的快速赋值，从而在计算以i为中心的回文子串的过程中，不必每次都从1开始比较，减少了比较次数，最终使得求解最长回文子串的长度达到线性O(N)的时间复杂度。</span><br><span class="line">参考：http:&#x2F;&#x2F;www.felix021.com&#x2F;blog&#x2F;read.php?2040 。另外，这篇文章也不错：http:&#x2F;&#x2F;leetcode.com&#x2F;2011&#x2F;11&#x2F;longest-palindromic-substring-part-ii.html 。</span><br></pre></td></tr></table></figure>

<h1 id="感谢相关作者的分享"><a href="#感谢相关作者的分享" class="headerlink" title="感谢相关作者的分享"></a>感谢相关作者的分享</h1><p>tanks</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>最大回文子串</tag>
      </tags>
  </entry>
  <entry>
    <title>回顾2020</title>
    <url>/2021/01/01/%E5%9B%9E%E9%A1%BE2020/</url>
    <content><![CDATA[<p><strong>Blog暂时停止更新，使用知乎更新。<a href="https://www.zhihu.com/people/ceng-fan-rong-9/posts" target="_blank" rel="noopener">https://www.zhihu.com/people/ceng-fan-rong-9/posts</a></strong></p>
<h1 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h1><p>刚工作时，都是追求技术，当时觉得如果身边有技术大牛就好了。</p>
<a id="more"></a>

<p>直到2018年时候，进了一家不错的公司。</p>
<p>相对来说，公司真的很不错。生活和工作平衡。</p>
<p>可是我家定居在佛山，而且考虑到孩子的教育问题。还是想回佛山附加工作。</p>
<p>因为疫情呆在家里太久少活动，加上身体不适（颈椎疼），就回佛山休息了。</p>
<p>回来后才发现，佛山和广州竞争很大。自身学历也低，自身也没很多技术积累，以前并没有喜欢记录的习惯</p>
<p>在广州有过一段时间较短的工作经历，没有写在简历上。</p>
<p>其实真的想回深圳的老东家上班。</p>
<h1 id="得失"><a href="#得失" class="headerlink" title="得失"></a>得失</h1><ul>
<li>一直在探索关于学习相关的东西，有一些收获</li>
<li>知识面得到拓展</li>
<li>失去了一份稳定的工作</li>
<li>清晰知道自己想要的是什么</li>
</ul>
<h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><ul>
<li>寻找一份稳定的工作，踏实干活</li>
<li>技术面我还是想尽量追求广，如果不接触下后端的工具，可能不会知道有<strong>跳跃表</strong>的存在，可能一直仅止步红黑树对于查询比较友好</li>
<li>技术深度的话，我想关注业务发展，一切技术都是为了驱动业务。所以解决业务开发上存在的问题更加重要，比如业务上的效率问题，业务依赖的技术难点问题。并且关注社区流行的工具。遇到问题了，能快速找到知识点进行学习和给出开源方案或者自身实现才是最好的（其实自身实现肯定会遇到很多奇怪的问题）。</li>
<li>空杯状态，持续提升学习能力。工作能力。稳定发展才是王道</li>
</ul>
]]></content>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>Note/TODO</title>
    <url>/1970/01/01/Note/TODO/</url>
    <content><![CDATA[<ul>
<li><p>webpack，rollup </p>
</li>
<li><p>book逆向</p>
<p>Mastering Reverse Engineering</p>
<p>Binary Analysis Cookbook</p>
</li>
</ul>
<p><a href="https://www.amazon.com/Mastering-Reverse-Engineering-Re-engineer-ethical/dp/178883884X/ref=sr_1_7?dchild=1&amp;keywords=reverse+engineer&amp;qid=1607489096&amp;sr=8-7" target="_blank" rel="noopener">https://www.amazon.com/Mastering-Reverse-Engineering-Re-engineer-ethical/dp/178883884X/ref=sr_1_7?dchild=1&amp;keywords=reverse+engineer&amp;qid=1607489096&amp;sr=8-7</a></p>
<p><a href="https://item.jd.com/28673765503.html" target="_blank" rel="noopener">https://item.jd.com/28673765503.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>Note/english</title>
    <url>/1970/01/01/Note/english/</url>
    <content><![CDATA[<p>abbey 修道院</p>
<p>abolish 废弃v</p>
<p>absence 缺席</p>
<p>absorb 吸收，吸引v</p>
<p>absurd 荒唐的</p>
<p>abundant 大量的</p>
<p>abuse 滥用</p>
<p>academic 学术的</p>
]]></content>
  </entry>
  <entry>
    <title>Note/iOS知识点</title>
    <url>/1970/01/01/Note/iOS%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>图片上传，内存占用问题</p>
<p><a href="https://stackoverflow.com/a/42843020" target="_blank" rel="noopener">https://stackoverflow.com/a/42843020</a></p>
<p><a href="https://developer.apple.com/documentation/foundation/url_loading_system/uploading_streams_of_data" target="_blank" rel="noopener">https://developer.apple.com/documentation/foundation/url_loading_system/uploading_streams_of_data</a></p>
<p>iOS 系统Debug View</p>
<p><a href="https://www.ryanipete.com/blog/ios/swift/objective-c/uidebugginginformationoverlay/" target="_blank" rel="noopener">https://www.ryanipete.com/blog/ios/swift/objective-c/uidebugginginformationoverlay/</a></p>
<p>hook系统库的C函数</p>
<p><a href="https://medium.com/@warmap_/%E7%94%A8dlopen-dlsym%E6%9D%A5hook%E5%92%8C%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81-d9f299efc1e8" target="_blank" rel="noopener">https://medium.com/@warmap_/%E7%94%A8dlopen-dlsym%E6%9D%A5hook%E5%92%8C%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81-d9f299efc1e8</a></p>
<p><a href="https://medium.com/@warmap_/method-swizzling-objective-c-frameworks-e2397c5d3344" target="_blank" rel="noopener">https://medium.com/@warmap_/method-swizzling-objective-c-frameworks-e2397c5d3344</a></p>
<p>性能优化</p>
<p>红色：是图层不必要的混合</p>
<p>黄色：离屏幕渲染<br>Bezier path instead of view cornering<br>UIImage分类来提供异步渲染的图片</p>
<p><a href="https://medium.com/e-legion/gotta-go-fast-building-for-speed-in-ios-efc78a626a9c" target="_blank" rel="noopener">https://medium.com/e-legion/gotta-go-fast-building-for-speed-in-ios-efc78a626a9c</a></p>
<p><a href="https://medium.com/e-legion/gotta-go-fast-building-for-speed-in-ios-part-2-644b3e68739a" target="_blank" rel="noopener">https://medium.com/e-legion/gotta-go-fast-building-for-speed-in-ios-part-2-644b3e68739a</a></p>
<p>进程和线程的关系</p>
<p>进程是资源的分配单位，线程是调度单位</p>
<p>WKWebView白屏问题</p>
<p><a href="https://mp.weixin.qq.com/s/rhYKLIbXOsUJC_n6dt9UfA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/rhYKLIbXOsUJC_n6dt9UfA</a></p>
<p>OC和Swift混合一个库开发</p>
<p>cocoapods 动态库引用静态库，modulemap</p>
<p>使用Runloop优化图片赋值</p>
<p>iOS内购流程</p>
<p><a href="https://www.jianshu.com/p/2f3f9a0673a3" target="_blank" rel="noopener">https://www.jianshu.com/p/2f3f9a0673a3</a></p>
<p>swift demangle</p>
<p><a href="https://stackoverflow.com/a/46762089" target="_blank" rel="noopener">https://stackoverflow.com/a/46762089</a></p>
<p><a href="https://stackoverflow.com/questions/24283804/swift-reverse-engineeringswift-function-name-rule" target="_blank" rel="noopener">https://stackoverflow.com/questions/24283804/swift-reverse-engineeringswift-function-name-rule</a></p>
<p><a href="https://stackoverflow.com/a/46195810" target="_blank" rel="noopener">https://stackoverflow.com/a/46195810</a></p>
<p>良好的计算机基础，数据结构和算法。对操作系统相关的线程、内存、文件有深入了解的优先,熟练使用Objective C，Swift，熟悉iOS的Runtime, 内存管理机制和多线程开发，或具有良好的C/C++语言基础，了解内存和指针概念</p>
]]></content>
  </entry>
  <entry>
    <title>Note/plan</title>
    <url>/1970/01/01/Note/plan/</url>
    <content><![CDATA[<ul>
<li><p>准备好iOS知识点<br>iOS Runtime知识点，Runloop知识点</p>
<p>一个优质的库讲解<br>WKWebView的坑<br>OC和Web的优化</p>
</li>
<li><p>准备好前端知识点<br>前端知识点<br>node知识点<br>http知识点</p>
</li>
<li><p>Sourcetree和Git的使用<br>Sourcetree使用技巧<br>Git使用习惯<br>Git脚本</p>
</li>
<li><p>刷Vue书籍，JS书籍<br>JavaScript设计模式与开发实践</p>
</li>
<li><p>考研计划<br>先了解考研视频</p>
</li>
</ul>
<h1 id="一个阅读工具app"><a href="#一个阅读工具app" class="headerlink" title="一个阅读工具app"></a>一个阅读工具app</h1><p>翻译问题，阅读问题</p>
<p>用户入口</p>
<ul>
<li>safari extension</li>
<li>原生app功能</li>
<li>mac功能</li>
<li>app extension</li>
</ul>
<p>功能</p>
<ul>
<li>数据同步功能</li>
<li>添加修改删除查询URL管理</li>
<li>常用网址管理</li>
<li>一键搜索功能</li>
<li>常用笔记管理，添加修改查询</li>
</ul>
<ul>
<li><del>优质书籍推荐</del></li>
<li><del>优质资源推荐</del></li>
</ul>
<p>分析</p>
<ul>
<li>ga学习</li>
<li>firebase</li>
</ul>
<p>推广</p>
<ul>
<li>分享功能</li>
</ul>
<p>审核指南</p>
<p><a href="https://developer.apple.com/cn/app-store/review/guidelines/" target="_blank" rel="noopener">https://developer.apple.com/cn/app-store/review/guidelines/</a></p>
<h1 id="github-iOS-app（面向世界）"><a href="#github-iOS-app（面向世界）" class="headerlink" title="github iOS app（面向世界）"></a>github iOS app（面向世界）</h1><h1 id="记忆app"><a href="#记忆app" class="headerlink" title="记忆app"></a>记忆app</h1><h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><h1 id="APP-Clips特征"><a href="#APP-Clips特征" class="headerlink" title="APP Clips特征"></a>APP Clips特征</h1><ul>
<li>使用流程<br><a href="https://www.appsflyer.com/resources/others/apple-app-clips/" target="_blank" rel="noopener">https://www.appsflyer.com/resources/others/apple-app-clips/</a></li>
<li>随时随地用</li>
<li>从url和二维码访问，safari banner。对deep link的完善，不用跳到app store下载整个app<br>尝试给每个物品或者店铺一个二维码，这样app能加载出数据</li>
<li>访问的形式，有默认的一种，也有多种配置，多个url访问不同的样式和功能</li>
<li>访问限制，限制特定地点打开<br><a href="https://developer.apple.com/documentation/app_clips/confirming_the_user_s_physical_location" target="_blank" rel="noopener">https://developer.apple.com/documentation/app_clips/confirming_the_user_s_physical_location</a></li>
<li>开发时，可以指定url参数，进入不同的配置</li>
<li>仅仅是app的一部分，一个main app只有一个 app clips</li>
</ul>
<h1 id="Safari-Extension-配合-APP-Clips使用"><a href="#Safari-Extension-配合-APP-Clips使用" class="headerlink" title="Safari Extension 配合 APP  Clips使用"></a>Safari Extension 配合 APP  Clips使用</h1>]]></content>
  </entry>
  <entry>
    <title>Note/前端知识点</title>
    <url>/1970/01/01/Note/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>精通pc（兼容主流浏览器）,移动端布局（rem，flex，流式布局等)；熟悉es5,se6+，熟悉webpack，gulp等构建工具；</p>
<h1 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h1><p>先说了CSS设计的像素，再说设备的屏幕物理像素。他们的DPR比例关系</p>
<p><strong>1px问题</strong></p>
<p>设置1px，如果DPR&gt; 1, 根据DPR进行缩小</p>
<p><strong>REM</strong></p>
<p>由于不同的设备的宽度的像素不一致，所以需要根据常规的750px设计稿进行按比例计算控件的宽度像素。为了在不同宽度的设备上，实现等比例适配。REM让所有的像素，都参考根元素的font-size按比例来设置。不同宽度的像素，按照当前设备的物理屏幕宽度像素与750px比例来设置根元素的font-size，这样整个页面也会按照比例适配。</p>
<p>所以REM是参考根元素像素作为在750px设计图下的实际的物理单位了。其它页面，按照比例适配。</p>
<p><strong>高清图清晰度问题</strong></p>
<p>然后他们之间有多种比例，如果DPR&gt;1，会导致设备的图片的物理像素色值无法完全在设备上展示出来，因为图片的像素数据源没有完全占满物理像素点。<br>解决方案是，initial-scale设置为DPR的缩小倍数。这样假如DRP=2, 则initial-scale=1/2。比如宽度是100px，按道理来说，默认initial-scale=1时，物理距离和PC WEB一致的。现在只会是50px物理像素的距离。（但是50px距离，是100px物理像素渲染的，所以颜色很准确）</p>
<p>考虑使用2倍图和3倍图来保证图片高清，控件的宽度为实例设计图的REM px单位。</p>
<ul>
<li><p>使用<code>img</code>标签的<code>srcset</code>属性</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"conardLi_1x.png"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">srcset</span>=<span class="string">" conardLi_2x.png 2x, conardLi_3x.png 3x"</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>使用js自带的 <code>Image</code> 异步加载图片</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dpr = <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"><span class="keyword">if</span>(dpr &gt; <span class="number">3</span>)&#123;</span><br><span class="line">	dpr = <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imgSrc = $(<span class="string">'#img'</span>).data(<span class="string">'src'</span>+dpr+<span class="string">'x'</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = imgSrc;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params">imgObj</span>)</span>&#123;</span><br><span class="line">	$(<span class="string">'#img'</span>).remove().prepend(imgObj);<span class="comment">//替换img对象</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><a href="https://juejin.cn/post/6844903651245293582" target="_blank" rel="noopener">https://juejin.cn/post/6844903651245293582</a></p>
<p><a href="https://juejin.cn/post/6844903845617729549" target="_blank" rel="noopener">https://juejin.cn/post/6844903845617729549</a></p>
<p><a href="https://blog.csdn.net/haojingwei0414/article/details/83304630" target="_blank" rel="noopener">https://blog.csdn.net/haojingwei0414/article/details/83304630</a></p>
]]></content>
  </entry>
  <entry>
    <title>Note/思维模型读后感</title>
    <url>/1970/01/01/Note/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<hr>
<hr>
<h1 id="思维模型"><a href="#思维模型" class="headerlink" title="思维模型"></a>思维模型</h1><h2 id="思维模型是什么"><a href="#思维模型是什么" class="headerlink" title="思维模型是什么"></a>思维模型是什么</h2><p><strong>思维模型的产生</strong></p>
<p>人类思考过程中对数据和思维的关系</p>
<p>数据-&gt;（分类处理）信息-&gt;知识-&gt;智慧<br>关系：从数据中提取出信息，从信息中探索出信息与信息的关系=知识，使用多种思维模式，选择出最合理的思考=智慧</p>
<p>思维模型是在知识中形成一些规律，可以进行模型思考，它需要足够简单</p>
<p>模型是为探索思想和总结观点而构建的虚拟世界。</p>
<p>它可以强化人对REDCAPE行为，提供有力支持。</p>
<p><strong>REDCAPE是什么？</strong></p>
<p>REDCAPE是一个大致的行为分类，任意的行为都可以归类到其中之一。<br>所以，确定行为类型后，我们就可以寻找对应的模型。可是，确定模型后，并不是单单思考这个模型的，可能还需要思考这个模型的关系（也就是深层次的理解）</p>
<p><strong>模型分类</strong></p>
<ul>
<li>对世界进行简化的模型</li>
<li>类比的模型</li>
<li>人工构造的探索性模型（这让我联想到假说演绎法）</li>
</ul>
<p><strong>不同的模型结构，用途并不相同</strong></p>
<ul>
<li>描述不同主体之间的互动</li>
<li>描述利他的行为</li>
<li>描述均衡过程</li>
<li>描述依赖行和复杂性</li>
</ul>
<p><strong>模型的相同点</strong></p>
<ul>
<li>简化<br>忽略不必要的细节，抽象现实世界的其它因素</li>
<li>形式化和精确定义<br>通常使用数学公式定义</li>
<li>所有模型都是错误的，因为仅仅在某些条件下，才会成立（举例，数学上的很多定理）</li>
</ul>
<h2 id="为什么要有思维模型"><a href="#为什么要有思维模型" class="headerlink" title="为什么要有思维模型"></a>为什么要有思维模型</h2><ul>
<li>理解复杂现象，提供合理的决策</li>
<li>强化思考能力，识别自己和他人的逻辑错误。思考具有形态模型了，可以从别人的各种建议中，反推出模型，从而对建议有更深刻的理解</li>
<li>提升REDCAPE能力，更好和准确地帮助我们分析历史行为（尝试解析一切复杂的行为和结构），设置目标，提供预测能力（决策力）</li>
<li>多模型能够将一系列的逻辑框架，生成信息<br>不同的模型，能够把不同的属性突出来。解析现实结界中的问题，并且可以进行预测。也就是支持REDCAPE能力</li>
</ul>
<h2 id="谁在使用模型"><a href="#谁在使用模型" class="headerlink" title="谁在使用模型"></a>谁在使用模型</h2><ul>
<li>25年前的教授和学者，在商业，政策，金融分析等方向上使用</li>
<li>现在，大数据兴起，模型已经成为日常生活一部分<br>使用模型组织和解析数据的能力，对一些具有创新，预测，学习方向都有实际价值</li>
</ul>
<h2 id="怎么创建思维模型"><a href="#怎么创建思维模型" class="headerlink" title="怎么创建思维模型"></a>怎么创建思维模型</h2><ul>
<li>具身法（简化版，考虑核心因素）</li>
<li>类比法（当前分析的东西，和什么样的过程相似）</li>
<li>另类现实法（提出假说，并且演绎可能性）</li>
</ul>
<p><strong>模型的描述：</strong></p>
<ul>
<li>要容易交流，定义清晰（例如程序员写代码的结构MVC，MVVM）</li>
<li>要简单化</li>
</ul>
<h2 id="怎么使用模型思维"><a href="#怎么使用模型思维" class="headerlink" title="怎么使用模型思维"></a>怎么使用模型思维</h2><p><strong>单模型的使用</strong></p>
<p>单个模型的思考：</p>
<ul>
<li>对模型进行逻辑推理（归纳行为？演绎行为？）</li>
<li>提出假说</li>
<li>设计解决方案</li>
<li>模拟数据（模拟用户？模拟主体行为？）</li>
</ul>
<p><strong>单个模型思考产生的问题</strong>：</p>
<ul>
<li>所有单个模型都是错误的。因为单个模型可能存在忽略了一些客观的细节，我们识别不出真正的整个客观事实的全貌</li>
</ul>
<p><strong>解决单个模型思考产生的问题</strong>：</p>
<ul>
<li>多模型思考，这样尽最大努力客服被忽略掉的因素（克服单个模型因严格而导致的狭隘性）</li>
</ul>
<p><strong>为什么要多思维模型思考</strong></p>
<p>因为单思维模型，并不能解释一切事物，单思维模型仅仅是一个局部的活动。想要解析一个复杂的事情或者结构，需要使用多种模型结合分析。（类似数学的题目，可能会使用到多个定理才能解出结果，单一的定理它仅仅是其中的一环。）</p>
<p><strong>多思维模型使用前提</strong></p>
<ul>
<li>被分析的东西，具有可分离性(分离主体，分离行为，分离环境。整体局部，局部整理，行为分类，环境分类。)</li>
<li>分析任何东西，都不应该限制多少个模型。随便套上去再看看合适不</li>
</ul>
<p><strong>多思维模型应用</strong></p>
<ul>
<li><p>REDCAPE, 7大用途</p>
</li>
<li><p>R：<br>思考主体，思考行为。从而得到原因，再做出假设条件，得到新的推导结果。但是这个结果并不是全面的，不一定正确。因为自己思考的，可能并不够全面，通过逻辑推理，可能会得到不可能性和可能性。</p>
<p>这个时候，我们就可以引入别人已经研究好的理论。从正确的理论，添加额外的条件进行准确的推导<br>阿罗定理（个体的偏好和群体偏好关系）<br>辛普森悖论（女人和男人的比例关系）<br>帕隆多悖论<br>友谊悖论</p>
<p>理论的推导，必定是有一些条件的，一定要注意条件是否成立</p>
<p>大石头优先</p>
<p>R的核心是，思考为什么，并且发现模型生效的条件。并且可以根据不同的条件，进行猜想演绎来验证</p>
</li>
<li><p>E</p>
<p>不能生搬硬套模型，选择对的模型能解释简单的问题，也可以解释复杂的问题</p>
<p>鞋子和薯片这种商品，短期内需求增加，价格变高。但是价格长期受边际成本影响较大（动态的过程，造成的供需关系）</p>
</li>
<li><p>D<br>设计出一些公平的模型用来达到目的，不受主体策略控制。（解决潜在的业务漏洞）</p>
</li>
<li><p>C<br>模型的值，是准确的值，可以测量的值。模型的值并不是程度词，如更多，更快。让模型准确地交流</p>
</li>
<li><p>A<br>使用模型来指导行动</p>
<p>指导行动的模型通常依赖于<strong>数据</strong>或<strong>数学公式</strong>或<strong>物理模型</strong><br>提出对行动相关的问题</p>
</li>
<li><p>P<br>解析和预测，有时候可以同用一个模型。有时候预测模型并不能解析什么（这是个别到个别的一般推理）</p>
</li>
<li><p>E<br>在模型中，提出假说条件，并且进行演绎</p>
</li>
</ul>
<p><strong>使用多模型</strong></p>
<ul>
<li>大模型进行预测</li>
<li>多个小模型解析</li>
</ul>
<h2 id="提高阅读理解力improve-learning-reading-thinking"><a href="#提高阅读理解力improve-learning-reading-thinking" class="headerlink" title="提高阅读理解力improve learning reading thinking"></a>提高阅读理解力improve learning reading thinking</h2><p><a href="https://www.unige.ch/fapse/logopedie/files/8314/1285/1095/cain-article3bis.pdf" target="_blank" rel="noopener">https://www.unige.ch/fapse/logopedie/files/8314/1285/1095/cain-article3bis.pdf</a></p>
<p><a href="https://scholarworks.gvsu.edu/cgi/viewcontent.cgi?referer=https://cn.bing.com/&amp;httpsredir=1&amp;article=1123&amp;context=lajm" target="_blank" rel="noopener">https://scholarworks.gvsu.edu/cgi/viewcontent.cgi?referer=https://cn.bing.com/&amp;httpsredir=1&amp;article=1123&amp;context=lajm</a></p>
<p><a href="https://sophia.stkate.edu/cgi/viewcontent.cgi?article=1170&amp;context=maed" target="_blank" rel="noopener">https://sophia.stkate.edu/cgi/viewcontent.cgi?article=1170&amp;context=maed</a></p>
<p><a href="https://www.editage.com/insights/5-tips-to-improve-your-research-article-and-make-it-reader-friendly" target="_blank" rel="noopener">https://www.editage.com/insights/5-tips-to-improve-your-research-article-and-make-it-reader-friendly</a></p>
]]></content>
  </entry>
  <entry>
    <title>Note/学习能力</title>
    <url>/1970/01/01/Note/%E5%AD%A6%E4%B9%A0%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<h1 id="学习思维"><a href="#学习思维" class="headerlink" title="学习思维"></a>学习思维</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><ul>
<li>是什么一定要关注主体对象的信息，如结构信息，性质信息，把得到的信息<strong>分类</strong>。如果是多个主体，一定要提取所有的主体的动作形成信息，再把信息组织成<strong>知识模型</strong>。</li>
<li><strong>熟悉是什么后，思考一下当前的模型能做什么</strong></li>
<li>怎么办是对从是什么信息里面提取出<strong>简单模型</strong>后（或者联想类似的知识模型）。首先明确自己的<strong>动机</strong>，然后归纳法和分类分析所有相关<strong>主体的信息和行为交互</strong>，环境因素，再询问自己为什么，根据（为什么）理论推出可行方案来达到动机<br>怎么办的行为可以参考<strong>REDCAPE</strong></li>
<li>为什么是针对<strong>是什么</strong>中的所有任意信息进行深一层的探索规律，能够把信息建立成<strong>知识模型</strong></li>
</ul>
<h2 id="怎么办"><a href="#怎么办" class="headerlink" title="怎么办"></a>怎么办</h2><ul>
<li>一般是在<strong>动机和遇到的问题</strong>环节产生的思考，可以参考<strong>REDCAPE</strong>形成方案，指定计划来解决问题</li>
<li>思考未来的行为，以其达到动机和计划<br>方案的选择在于决策能力，而决策能力在于你向成为一个怎么样的人</li>
</ul>
<table>
<thead>
<tr>
<th>怎么办</th>
</tr>
</thead>
<tbody><tr>
<td>生成方案，并且提供解析（为什么，然后假说演绎法）</td>
</tr>
<tr>
<td>设置目标和计划，并且执行。定期对比反馈进度</td>
</tr>
</tbody></table>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><ul>
<li>为什么提供的解析才是真正的原理，是属于三段论的大前提。小前提是属于大前提理论主体中的分类，所以会有对应的结果</li>
<li>一般是在给出<strong>方案</strong>的时候产生的思考</li>
<li>识别主体结构过程中</li>
</ul>
<table>
<thead>
<tr>
<th>为什么</th>
</tr>
</thead>
<tbody><tr>
<td>我们要找到问题和目标的关键因素，寻找影响关键因素的主体和潜在的行为</td>
</tr>
<tr>
<td>如果是在阅读或学习过程中，识别<strong>主体的子部分</strong>的<strong>组成</strong>和<strong>性质</strong>，肯定是有原因的。一般都是为了支持主体的功能</td>
</tr>
</tbody></table>
<h2 id="学习是什么"><a href="#学习是什么" class="headerlink" title="学习是什么"></a>学习是什么</h2><p>学习是<strong>”数据-&gt;信息-&gt;模型“  建立信息不丢失的正确模型</strong></p>
<p>是什么是我们学习陌生概念的第一步，本质就是提炼简单的模型，用一些套路从我们脑子中拉出更多的已知信息来建立模型。</p>
<p>是什么还应该介绍所学的东西有什么用。</p>
<p>另外两层的就是如何使用（<strong>怎么办</strong>）以及为什么能这么使用？就要看（<strong>为什么</strong>）</p>
<p>本质来说，学习还是为了补充自己的知识模型，达到<strong>动机-&gt;方案-&gt;目标-&gt;遇到的问题</strong></p>
<h2 id="提取信息为模型"><a href="#提取信息为模型" class="headerlink" title="提取信息为模型"></a>提取信息为模型</h2><table>
<thead>
<tr>
<th>提取信息为模型（数据-&gt;信息-&gt;模型）</th>
</tr>
</thead>
<tbody><tr>
<td><strong>建立知识的简化模型，或者联想是否有相似已有的模型（联想）</strong></td>
</tr>
<tr>
<td>把牵涉到的所有主体都提取出来，以及他们的所有动词交互</td>
</tr>
<tr>
<td>对所有主体的<strong>按他们的行为进行分类（分类思想）</strong>，并且打上<strong>tag</strong>进行标签分类，把<strong>tag</strong>当成主体的属性（这是重中之重，洞察力就是如此，提取更多的信息）</td>
</tr>
<tr>
<td><strong>对比思想，相同的行为和不同的主体进行对比，新增额外的程度属性</strong>，这是<strong>有时候是隐藏信息，容易被忽略</strong></td>
</tr>
<tr>
<td>所有主体的组成、属性，都是为了支持自身的行为功能，或者支持外部其它主体的性能功能</td>
</tr>
<tr>
<td>识别所有主体之间都是如何<strong>交互的（关注动词</strong>），从而提炼一个模型</td>
</tr>
<tr>
<td><strong>局部分析模型主体</strong>（<strong>结构分类</strong>）</td>
</tr>
<tr>
<td>识别如果是非具有主观的所有主体，识别他们的组成</td>
</tr>
<tr>
<td>主体的每一个组成部分，它都有特征和功能。它也可以当成一个主体被分析<strong>是什么</strong></td>
</tr>
<tr>
<td>主体的每一部分，都是根据主体的功能有关的，部分提供功能性支持主体的功能。并且需要解析为什么这样的组成，部分就能够支持主体的功能。从这里看出<strong>局部和全局，是什么和为什么以及怎么办，都是相互有深层次的关系的。</strong></td>
</tr>
<tr>
<td><strong>全局分析模型主体</strong>（<strong>结构分类</strong>）</td>
</tr>
<tr>
<td>识别所有主体，都是都是在其它模型中，组成什么（本质上，就是主体当前在什么主体中作为一份子，或者被使用）</td>
</tr>
<tr>
<td><strong>识别主体的状态和过程，主体的所有过去和现在的所有状态，演绎法未来的状态</strong>（<strong>时间角度</strong>）</td>
</tr>
<tr>
<td>也就是识别主体的由来，如何发展到当前这个状态的。以及思考当前主体模型的状态和过程</td>
</tr>
<tr>
<td><strong>识别模型所有主体的动机或者使用主体的动机</strong>（<strong>意识分类</strong>）</td>
</tr>
<tr>
<td>主体可能有自己的独立思考和学习能力，如果没有动机，就可以识别它能用来做什么。如果是看书，不妨思考作者的写作动机，表达动机，章节设计动机</td>
</tr>
<tr>
<td><strong>对主体的行为或操作分类</strong>（<strong>功能分类</strong>）</td>
</tr>
<tr>
<td>也就是主体都能做什么</td>
</tr>
<tr>
<td><strong>对主体行为的环境（主体所在场景分类）</strong></td>
</tr>
<tr>
<td>思考主体的<strong>场景</strong>。如地点，时间，等其它一切可能潜在的特殊细节</td>
</tr>
<tr>
<td><strong>问题类：寻求解决方案（功能分类）</strong></td>
</tr>
<tr>
<td>主体会想知道<strong>怎么办</strong>，此时应该根据为什么去分析问题的产生，从而解决问题</td>
</tr>
<tr>
<td><strong>主体结构类：主体的结构和设计是为了什么，本质上也是子部分为了给主体提供对外的能力，本质上也是为了支持主体的动机和目标（功能分类）</strong></td>
</tr>
<tr>
<td>我们在学习一些新概念，而<strong>主体内部是基于各种结构交互形成对外的能力</strong>。本质上一切<strong>为什么</strong>都是服务于主体的动作的，为了提供主体动作的支持</td>
</tr>
</tbody></table>
<h2 id="识别自己的动机"><a href="#识别自己的动机" class="headerlink" title="识别自己的动机"></a>识别自己的动机</h2><table>
<thead>
<tr>
<th>REDCAPE</th>
</tr>
</thead>
<tbody><tr>
<td>识别自己当前的目标和任务是什么，属于<strong>REDCAPE</strong>中的那一个类型</td>
</tr>
<tr>
<td>R</td>
</tr>
<tr>
<td>R是通过逻辑去推理归纳法的假设是否正确。也就是验证为什么的答案，因为没有使用模型，答案可能错误的。<strong>这是构建模型的阶段，也就是数据-&gt;信息-&gt;模型（知识）</strong></td>
</tr>
<tr>
<td>R的难度在于把<strong>”数据-&gt;信息-&gt;模型“  建立信息不丢失的正确模型</strong></td>
</tr>
<tr>
<td>E</td>
</tr>
<tr>
<td>E是通过<strong>已有的模型</strong>，用模型去<strong>解释相似的主体和相似的行为</strong></td>
</tr>
<tr>
<td>E也可以<strong>用来逻辑推理简单验证复杂的模型是否正确，如果逻辑推理不出来，可以做简单的模型D-&gt;A（最小模型，首先验证猜想），从实践中获取猜想的结果</strong></td>
</tr>
<tr>
<td><strong>世界的所有事情，都不是绝对的遵从因果关系。存在概率事件，不能过于理想化</strong></td>
</tr>
<tr>
<td>D</td>
</tr>
<tr>
<td>D是设计，<strong>为了完成动机，设计相关主体的结构，提供对外的行为功能</strong>，需要思考主体和其它主体的<strong>行为交互（动机的必要条件）</strong>，<strong>主体要有优势的行为</strong>一般依靠提升<strong>主体的机构和属性</strong></td>
</tr>
<tr>
<td>C</td>
</tr>
<tr>
<td>C是交流，让模型交流方便，为了完善模型，也为了模型公式化。需要提高与人的沟通技巧</td>
</tr>
<tr>
<td>A</td>
</tr>
<tr>
<td>A是行动，根据D设计的功能来支持行为，并且<strong>按照逻辑（因果关系，优先级，最小模型单位）列出可执行行步骤（方案的逻辑）</strong></td>
</tr>
<tr>
<td>P</td>
</tr>
<tr>
<td>P是预测，为了未来更好的达到动机，<strong>扩大行为优势，减少劣势，增加成功几率</strong>。根据模型来分析未知的风险，从而避开风险或者提前创建D和A来<strong>扩大行为优势</strong>。也就是根据<strong>当前正确的模型，设置充分条件，会得到什么可能的结果（使用模型）</strong></td>
</tr>
<tr>
<td>E</td>
</tr>
<tr>
<td>E是探索，在现在的主体信息和行为交互中，或者参考一些模型。我们在模型上提出一些假设（假说演绎法），进而发现一些更容易达到动机的设计D和行为A（方案）。也就是<strong>尝试增加模型的充分条件（或建立比当前更好的模型，E-&gt;R），把潜在的功能变为优势行为（优化或开发新的模型）</strong></td>
</tr>
</tbody></table>
<h2 id="提取信息的方法"><a href="#提取信息的方法" class="headerlink" title="提取信息的方法"></a><strong>提取信息的方法</strong></h2><h4 id="归纳法"><a href="#归纳法" class="headerlink" title="归纳法"></a><strong>归纳法</strong></h4><p><strong>对主体+行为+环境+历史使用归纳法</strong></p>
<p><strong>识别为已经知道的正确的模型，多模型进行思考</strong></p>
<h2 id="预测的基本方法"><a href="#预测的基本方法" class="headerlink" title="预测的基本方法"></a><strong>预测的基本方法</strong></h2><h4 id="演绎法"><a href="#演绎法" class="headerlink" title="演绎法"></a><strong>演绎法</strong></h4><h4 id="假说演绎法"><a href="#假说演绎法" class="headerlink" title="假说演绎法"></a><strong>假说演绎法</strong></h4><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a><strong>模型</strong></h2><h3 id="hope模型（结构）"><a href="#hope模型（结构）" class="headerlink" title="hope模型（结构）"></a><strong>hope模型（结构）</strong></h3><h3 id="结构化分析模型（分类）"><a href="#结构化分析模型（分类）" class="headerlink" title="结构化分析模型（分类）"></a><strong>结构化分析模型</strong>（分类）</h3><h3 id="系统思考模型（结构）"><a href="#系统思考模型（结构）" class="headerlink" title="系统思考模型（结构）"></a><strong>系统思考模型（结构）</strong></h3><h3 id="目标管理模型（行为）"><a href="#目标管理模型（行为）" class="headerlink" title="目标管理模型（行为）"></a><strong>目标管理模型</strong>（行为）</h3><h2 id="复盘（结构-行为）"><a href="#复盘（结构-行为）" class="headerlink" title="复盘（结构+行为）"></a>复盘（结构+行为）</h2>]]></content>
  </entry>
</search>
